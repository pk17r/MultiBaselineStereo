.TH "descriptors" 3 "Sun Jan 24 2016" "Version 1.10.0" "libdvbv5" \" -*- nroff -*-
.ad l
.nh
.SH NAME
descriptors \- Parsers for several MPEG-TS descriptors
.SS "Files"

.in +1c
.ti -1c
.RI "file \fBdesc_atsc_service_location\&.h\fP"
.br
.RI "\fIProvides the descriptors for ATSC service location\&. \fP"
.ti -1c
.RI "file \fBdesc_ca\&.h\fP"
.br
.RI "\fIProvides the descriptors for Conditional Access\&. \fP"
.ti -1c
.RI "file \fBdesc_ca_identifier\&.h\fP"
.br
.RI "\fIProvides the descriptors for the Conditional Access identifier\&. \fP"
.ti -1c
.RI "file \fBdesc_cable_delivery\&.h\fP"
.br
.RI "\fIProvides the descriptors for the cable delivery system descriptor\&. \fP"
.ti -1c
.RI "file \fBdesc_event_extended\&.h\fP"
.br
.RI "\fIProvides the descriptors for the extended event descriptor\&. \fP"
.ti -1c
.RI "file \fBdesc_event_short\&.h\fP"
.br
.RI "\fIProvides the descriptors for the short event descriptor\&. \fP"
.ti -1c
.RI "file \fBdesc_extension\&.h\fP"
.br
.RI "\fIProvides the descriptors for the extension descriptor\&. \fP"
.ti -1c
.RI "file \fBdesc_frequency_list\&.h\fP"
.br
.RI "\fIProvides the descriptors for the frequency list descriptor\&. \fP"
.ti -1c
.RI "file \fBdesc_hierarchy\&.h\fP"
.br
.RI "\fIProvides the descriptors for the hierarchy descriptor\&. \fP"
.ti -1c
.RI "file \fBdesc_isdbt_delivery\&.h\fP"
.br
.RI "\fIProvides the descriptors for the ISDB-T terrestrial delivery system\&. \fP"
.ti -1c
.RI "file \fBdesc_language\&.h\fP"
.br
.RI "\fIProvides the descriptors for the ISO639 language descriptor\&. \fP"
.ti -1c
.RI "file \fBdesc_logical_channel\&.h\fP"
.br
.RI "\fIProvides the descriptors for the LCN - Logican Channel Number\&. \fP"
.ti -1c
.RI "file \fBdesc_network_name\&.h\fP"
.br
.RI "\fIProvides the descriptors for the network name descriptor\&. \fP"
.ti -1c
.RI "file \fBdesc_partial_reception\&.h\fP"
.br
.RI "\fIProvides the descriptors for the ISDB partial reception descriptor\&. \fP"
.ti -1c
.RI "file \fBdesc_sat\&.h\fP"
.br
.RI "\fIProvides the descriptors for the satellite delivery system descriptor\&. \fP"
.ti -1c
.RI "file \fBdesc_service\&.h\fP"
.br
.RI "\fIProvides the descriptors for the service descriptor\&. \fP"
.ti -1c
.RI "file \fBdesc_t2_delivery\&.h\fP"
.br
.RI "\fIProvides the descriptors for the DVB-T2 delivery system descriptor\&. \fP"
.ti -1c
.RI "file \fBdesc_terrestrial_delivery\&.h\fP"
.br
.RI "\fIProvides the descriptors for the DVB-T terrestrial delivery system descriptor\&. \fP"
.ti -1c
.RI "file \fBdesc_ts_info\&.h\fP"
.br
.RI "\fIProvides the descriptors for the ISDB TS information descriptor\&. \fP"
.in -1c
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBatsc_desc_service_location_elementary\fP"
.br
.RI "\fIservice location elementary descriptors \fP"
.ti -1c
.RI "struct \fBatsc_desc_service_location\fP"
.br
.RI "\fIDescribes the elementary streams inside a PAT table for ATSC\&. \fP"
.ti -1c
.RI "struct \fBdvb_desc_ca\fP"
.br
.RI "\fIContains the private data for Conditional Access\&. \fP"
.ti -1c
.RI "struct \fBdvb_desc_ca_identifier\fP"
.br
.RI "\fIIndicates if a particular bouquet, service or event is associated with a CA system\&. \fP"
.ti -1c
.RI "struct \fBdvb_desc_cable_delivery\fP"
.br
.RI "\fIStructure containing the cable delivery system descriptor\&. \fP"
.ti -1c
.RI "struct \fBdvb_desc_event_extended\fP"
.br
.RI "\fIStructure containing the extended event descriptor\&. \fP"
.ti -1c
.RI "struct \fBdvb_desc_event_short\fP"
.br
.RI "\fIStructure containing the short event descriptor\&. \fP"
.ti -1c
.RI "struct \fBdvb_extension_descriptor\fP"
.br
.RI "\fIStructure containing the extended descriptors\&. \fP"
.ti -1c
.RI "struct \fBdvb_ext_descriptor\fP"
.br
.RI "\fIStructure that describes the parser functions for the extended descriptors\&. \fP"
.ti -1c
.RI "struct \fBdvb_desc_frequency_list\fP"
.br
.RI "\fIStruct containing the frequency list descriptor\&. \fP"
.ti -1c
.RI "struct \fBdvb_desc_hierarchy\fP"
.br
.RI "\fIStructure containing the hierarchy descriptor\&. \fP"
.ti -1c
.RI "struct \fBisdbt_desc_terrestrial_delivery_system\fP"
.br
.RI "\fIStruct containing the ISDB-T terrestrial delivery system\&. \fP"
.ti -1c
.RI "struct \fBdvb_desc_language\fP"
.br
.RI "\fIStructure containing the ISO639 language descriptor\&. \fP"
.ti -1c
.RI "struct \fBdvb_desc_logical_channel_number\fP"
.br
.RI "\fIStructure containing the logical channel number entires\&. \fP"
.ti -1c
.RI "struct \fBdvb_desc_logical_channel\fP"
.br
.RI "\fIStructure containing the logical channel number descriptor\&. \fP"
.ti -1c
.RI "struct \fBdvb_desc_network_name\fP"
.br
.RI "\fIStruct containing the network name descriptor\&. \fP"
.ti -1c
.RI "struct \fBisdb_partial_reception_service_id\fP"
.br
.RI "\fIService ID that uses partial reception\&. \fP"
.ti -1c
.RI "struct \fBisdb_desc_partial_reception\fP"
.br
.RI "\fIStructure containing the partial reception descriptor\&. \fP"
.ti -1c
.RI "struct \fBdvb_desc_sat\fP"
.br
.RI "\fIStructure containing the satellite delivery system descriptor\&. \fP"
.ti -1c
.RI "struct \fBdvb_desc_service\fP"
.br
.RI "\fIStructure containing the service descriptor\&. \fP"
.ti -1c
.RI "struct \fBdvb_desc_t2_delivery_subcell\fP"
.br
.RI "\fIStructure to describe transponder subcell extension and frequencies\&. \fP"
.ti -1c
.RI "struct \fBdvb_desc_t2_delivery\fP"
.br
.RI "\fIStructure containing the T2 delivery system descriptor\&. \fP"
.ti -1c
.RI "struct \fBdvb_desc_terrestrial_delivery\fP"
.br
.RI "\fIStructure containing the DVB-T terrestrial delivery system descriptor\&. \fP"
.ti -1c
.RI "struct \fBdvb_desc_ts_info_transmission_type\fP"
.br
.RI "\fIISDB TS information transmission type\&. \fP"
.ti -1c
.RI "struct \fBdvb_desc_ts_info\fP"
.br
.RI "\fIStructure describing the ISDB TS information descriptor\&. \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBextension_descriptors\fP { \fBimage_icon_descriptor\fP, \fBcpcm_delivery_signalling_descriptor\fP, \fBCP_descriptor\fP, \fBCP_identifier_descriptor\fP, \fBT2_delivery_system_descriptor\fP, \fBSH_delivery_system_descriptor\fP, \fBsupplementary_audio_descriptor\fP, \fBnetwork_change_notify_descriptor\fP, \fBmessage_descriptor\fP, \fBtarget_region_descriptor\fP, \fBtarget_region_name_descriptor\fP, \fBservice_relocated_descriptor\fP }
.RI "\fIList containing all extended descriptors used by Digital TV MPEG-TS as defined at ETSI EN 300 468 V1\&.11\&.1\&. \fP""
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBatsc_desc_service_location_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIInitializes and parses the service location descriptor\&. \fP"
.ti -1c
.RI "void \fBatsc_desc_service_location_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, const struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIPrints the content of the service location descriptor\&. \fP"
.ti -1c
.RI "void \fBatsc_desc_service_location_free\fP (struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIFrees all data allocated by the service location descriptor\&. \fP"
.ti -1c
.RI "int \fBdvb_desc_ca_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIInitializes and parses the CA descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_desc_ca_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, const struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIPrints the content of the CA descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_desc_ca_free\fP (struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIFrees all data allocated by the CA descriptor\&. \fP"
.ti -1c
.RI "int \fBdvb_desc_ca_identifier_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIInitializes and parses the CA identifier descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_desc_ca_identifier_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, const struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIPrints the content of the CA identifier descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_desc_ca_identifier_free\fP (struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIFrees all data allocated by the CA identifier descriptor\&. \fP"
.ti -1c
.RI "int \fBdvb_desc_cable_delivery_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIInitializes and parses the service location descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_desc_cable_delivery_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, const struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIPrints the content of the service location descriptor\&. \fP"
.ti -1c
.RI "int \fBdvb_desc_event_extended_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIInitializes and parses the extended event descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_desc_event_extended_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, const struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIPrints the content of the extended event descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_desc_event_extended_free\fP (struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIFrees all data allocated by the extended event descriptor\&. \fP"
.ti -1c
.RI "int \fBdvb_desc_event_short_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIInitializes and parses the short event descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_desc_event_short_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, const struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIPrints the content of the short event descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_desc_event_short_free\fP (struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIFrees all data allocated by the short event descriptor\&. \fP"
.ti -1c
.RI "int \fBdvb_extension_descriptor_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIInitializes and parses the extended descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_extension_descriptor_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, const struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIPrints the content of the extended descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_extension_descriptor_free\fP (struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIFrees all data allocated by the extended descriptor\&. \fP"
.ti -1c
.RI "int \fBdvb_desc_frequency_list_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIInitializes and parses the frequency list descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_desc_frequency_list_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, const struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIPrints the content of the frequency list descriptor\&. \fP"
.ti -1c
.RI "int \fBdvb_desc_hierarchy_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIInitializes and parses the hierarchy descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_desc_hierarchy_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, const struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIPrints the content of the hierarchy descriptor\&. \fP"
.ti -1c
.RI "int \fBisdbt_desc_delivery_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIInitializes and parses the ISDB-T terrestrial delivery system descriptor\&. \fP"
.ti -1c
.RI "void \fBisdbt_desc_delivery_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, const struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIPrints the content of the ISDB-T terrestrial delivery system descriptor\&. \fP"
.ti -1c
.RI "void \fBisdbt_desc_delivery_free\fP (struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIFrees all data allocated by the ISDB-T terrestrial delivery system descriptor\&. \fP"
.ti -1c
.RI "int \fBdvb_desc_language_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIInitializes and parses the language descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_desc_language_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, const struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIPrints the content of the language descriptor\&. \fP"
.ti -1c
.RI "int \fBdvb_desc_logical_channel_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIInitializes and parses the logical channel number descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_desc_logical_channel_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, const struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIPrints the content of the logical channel number descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_desc_logical_channel_free\fP (struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIFrees all data allocated by the logical channel number descriptor\&. \fP"
.ti -1c
.RI "int \fBdvb_desc_network_name_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIInitializes and parses the network name descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_desc_network_name_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, const struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIPrints the content of the network name descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_desc_network_name_free\fP (struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIFrees all data allocated by the network name descriptor\&. \fP"
.ti -1c
.RI "int \fBisdb_desc_partial_reception_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIInitializes and parses the ISDB-T partial reception descriptor\&. \fP"
.ti -1c
.RI "void \fBisdb_desc_partial_reception_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, const struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIPrints the content of the ISDB-T partial reception descriptor\&. \fP"
.ti -1c
.RI "void \fBisdb_desc_partial_reception_free\fP (struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIFrees all data allocated by the ISDB-T partial reception descriptor\&. \fP"
.ti -1c
.RI "int \fBdvb_desc_sat_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIInitializes and parses the satellite delivery system descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_desc_sat_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, const struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIPrints the content of the satellite delivery system descriptor\&. \fP"
.ti -1c
.RI "int \fBdvb_desc_service_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIInitializes and parses the service descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_desc_service_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, const struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIPrints the content of the service descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_desc_service_free\fP (struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIFrees all data allocated by the service descriptor\&. \fP"
.ti -1c
.RI "int \fBdvb_desc_t2_delivery_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, struct \fBdvb_extension_descriptor\fP *ext, void *desc)"
.br
.RI "\fIInitializes and parses the T2 delivery system descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_desc_t2_delivery_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, const struct \fBdvb_extension_descriptor\fP *ext, const void *desc)"
.br
.RI "\fIPrints the content of the T2 delivery system descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_desc_t2_delivery_free\fP (const void *desc)"
.br
.RI "\fIFrees all data allocated by the T2 delivery system descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_desc_terrestrial_delivery_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, const struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIPrints the content of the DVB-T terrestrial delivery system descriptor\&. \fP"
.ti -1c
.RI "int \fBdvb_desc_ts_info_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIInitializes and parses the ISDB TS information descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_desc_ts_info_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, const struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIPrints the content of the ISDB TS information descriptor\&. \fP"
.ti -1c
.RI "void \fBdvb_desc_ts_info_free\fP (struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIFrees all data allocated by the ISDB TS information descriptor\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBextension_descriptors\fP"

.PP
List containing all extended descriptors used by Digital TV MPEG-TS as defined at ETSI EN 300 468 V1\&.11\&.1\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIimage_icon_descriptor \fP\fP
image icon descriptor 
.TP
\fB\fIcpcm_delivery_signalling_descriptor \fP\fP
Content Protection/Copy Management (CPCM) delivery signalling descriptor\&. 
.TP
\fB\fICP_descriptor \fP\fP
Content Protection descriptor\&. 
.TP
\fB\fICP_identifier_descriptor \fP\fP
Content Protection identifier descriptor\&. 
.TP
\fB\fIT2_delivery_system_descriptor \fP\fP
DVB-T2 delivery system descriptor\&. 
.TP
\fB\fISH_delivery_system_descriptor \fP\fP
DVB-SH delivery system descriptor\&. 
.TP
\fB\fIsupplementary_audio_descriptor \fP\fP
supplementary audio descriptor 
.TP
\fB\fInetwork_change_notify_descriptor \fP\fP
network change notify descriptor 
.TP
\fB\fImessage_descriptor \fP\fP
message descriptor 
.TP
\fB\fItarget_region_descriptor \fP\fP
target region descriptor 
.TP
\fB\fItarget_region_name_descriptor \fP\fP
target region name descriptor 
.TP
\fB\fIservice_relocated_descriptor \fP\fP
service relocated descriptor 
.PP
Definition at line 90 of file desc_extension\&.h\&.
.SH "Function Documentation"
.PP 
.SS "void atsc_desc_service_location_free (struct \fBdvb_desc\fP * desc)"

.PP
Frees all data allocated by the service location descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be freed 
.RE
.PP

.SS "int atsc_desc_service_location_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, struct \fBdvb_desc\fP * desc)"

.PP
Initializes and parses the service location descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the descriptor's raw data 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be allocated and filled
.RE
.PP
This function allocates a the descriptor and fills the fields inside the struct\&. It also makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void atsc_desc_service_location_print (struct \fBdvb_v5_fe_parms\fP * parms, const struct \fBdvb_desc\fP * desc)"

.PP
Prints the content of the service location descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP 
.RE
.PP

.SS "void dvb_desc_ca_free (struct \fBdvb_desc\fP * desc)"

.PP
Frees all data allocated by the CA descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be freed 
.RE
.PP

.SS "void dvb_desc_ca_identifier_free (struct \fBdvb_desc\fP * desc)"

.PP
Frees all data allocated by the CA identifier descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be freed 
.RE
.PP

.SS "int dvb_desc_ca_identifier_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, struct \fBdvb_desc\fP * desc)"

.PP
Initializes and parses the CA identifier descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the descriptor's raw data 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be allocated and filled
.RE
.PP
This function allocates a the descriptor and fills the fields inside the struct\&. It also makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void dvb_desc_ca_identifier_print (struct \fBdvb_v5_fe_parms\fP * parms, const struct \fBdvb_desc\fP * desc)"

.PP
Prints the content of the CA identifier descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP 
.RE
.PP

.SS "int dvb_desc_ca_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, struct \fBdvb_desc\fP * desc)"

.PP
Initializes and parses the CA descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the descriptor's raw data 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be allocated and filled
.RE
.PP
This function allocates a the descriptor and fills the fields inside the struct\&. It also makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void dvb_desc_ca_print (struct \fBdvb_v5_fe_parms\fP * parms, const struct \fBdvb_desc\fP * desc)"

.PP
Prints the content of the CA descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP 
.RE
.PP

.SS "int dvb_desc_cable_delivery_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, struct \fBdvb_desc\fP * desc)"

.PP
Initializes and parses the service location descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the descriptor's raw data 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be allocated and filled
.RE
.PP
This function initializes and makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
Currently, no memory is allocated internally\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void dvb_desc_cable_delivery_print (struct \fBdvb_v5_fe_parms\fP * parms, const struct \fBdvb_desc\fP * desc)"

.PP
Prints the content of the service location descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP 
.RE
.PP

.SS "void dvb_desc_event_extended_free (struct \fBdvb_desc\fP * desc)"

.PP
Frees all data allocated by the extended event descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be freed 
.RE
.PP

.SS "int dvb_desc_event_extended_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, struct \fBdvb_desc\fP * desc)"

.PP
Initializes and parses the extended event descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the descriptor's raw data 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be allocated and filled
.RE
.PP
This function allocates a the descriptor and fills the fields inside the struct\&. It also makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void dvb_desc_event_extended_print (struct \fBdvb_v5_fe_parms\fP * parms, const struct \fBdvb_desc\fP * desc)"

.PP
Prints the content of the extended event descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP 
.RE
.PP

.SS "void dvb_desc_event_short_free (struct \fBdvb_desc\fP * desc)"

.PP
Frees all data allocated by the short event descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be freed 
.RE
.PP

.SS "int dvb_desc_event_short_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, struct \fBdvb_desc\fP * desc)"

.PP
Initializes and parses the short event descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the descriptor's raw data 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be allocated and filled
.RE
.PP
This function allocates a the descriptor and fills the fields inside the struct\&. It also makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void dvb_desc_event_short_print (struct \fBdvb_v5_fe_parms\fP * parms, const struct \fBdvb_desc\fP * desc)"

.PP
Prints the content of the short event descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP 
.RE
.PP

.SS "int dvb_desc_frequency_list_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, struct \fBdvb_desc\fP * desc)"

.PP
Initializes and parses the frequency list descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the descriptor's raw data 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be allocated and filled
.RE
.PP
This function initializes and makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
Currently, no memory is allocated internally\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void dvb_desc_frequency_list_print (struct \fBdvb_v5_fe_parms\fP * parms, const struct \fBdvb_desc\fP * desc)"

.PP
Prints the content of the frequency list descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP 
.RE
.PP

.SS "int dvb_desc_hierarchy_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, struct \fBdvb_desc\fP * desc)"

.PP
Initializes and parses the hierarchy descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the descriptor's raw data 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be allocated and filled
.RE
.PP
This function initializes and makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
Currently, no memory is allocated internally\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void dvb_desc_hierarchy_print (struct \fBdvb_v5_fe_parms\fP * parms, const struct \fBdvb_desc\fP * desc)"

.PP
Prints the content of the hierarchy descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP 
.RE
.PP

.SS "int dvb_desc_language_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, struct \fBdvb_desc\fP * desc)"

.PP
Initializes and parses the language descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the descriptor's raw data 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be allocated and filled
.RE
.PP
This function initializes and makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
Currently, no memory is allocated internally\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void dvb_desc_language_print (struct \fBdvb_v5_fe_parms\fP * parms, const struct \fBdvb_desc\fP * desc)"

.PP
Prints the content of the language descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP 
.RE
.PP

.SS "void dvb_desc_logical_channel_free (struct \fBdvb_desc\fP * desc)"

.PP
Frees all data allocated by the logical channel number descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be freed 
.RE
.PP

.SS "int dvb_desc_logical_channel_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, struct \fBdvb_desc\fP * desc)"

.PP
Initializes and parses the logical channel number descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the descriptor's raw data 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be allocated and filled
.RE
.PP
This function allocates a the descriptor and fills the fields inside the struct\&. It also makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void dvb_desc_logical_channel_print (struct \fBdvb_v5_fe_parms\fP * parms, const struct \fBdvb_desc\fP * desc)"

.PP
Prints the content of the logical channel number descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP 
.RE
.PP

.SS "void dvb_desc_network_name_free (struct \fBdvb_desc\fP * desc)"

.PP
Frees all data allocated by the network name descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be freed 
.RE
.PP

.SS "int dvb_desc_network_name_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, struct \fBdvb_desc\fP * desc)"

.PP
Initializes and parses the network name descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the descriptor's raw data 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be allocated and filled
.RE
.PP
This function allocates a the descriptor and fills the fields inside the struct\&. It also makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void dvb_desc_network_name_print (struct \fBdvb_v5_fe_parms\fP * parms, const struct \fBdvb_desc\fP * desc)"

.PP
Prints the content of the network name descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP 
.RE
.PP

.SS "int dvb_desc_sat_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, struct \fBdvb_desc\fP * desc)"

.PP
Initializes and parses the satellite delivery system descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the descriptor's raw data 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be allocated and filled
.RE
.PP
This function initializes and makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
Currently, no memory is allocated internally\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void dvb_desc_sat_print (struct \fBdvb_v5_fe_parms\fP * parms, const struct \fBdvb_desc\fP * desc)"

.PP
Prints the content of the satellite delivery system descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP 
.RE
.PP

.SS "void dvb_desc_service_free (struct \fBdvb_desc\fP * desc)"

.PP
Frees all data allocated by the service descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be freed 
.RE
.PP

.SS "int dvb_desc_service_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, struct \fBdvb_desc\fP * desc)"

.PP
Initializes and parses the service descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the descriptor's raw data 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be allocated and filled
.RE
.PP
This function allocates a the descriptor and fills the fields inside the struct\&. It also makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void dvb_desc_service_print (struct \fBdvb_v5_fe_parms\fP * parms, const struct \fBdvb_desc\fP * desc)"

.PP
Prints the content of the service descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP 
.RE
.PP

.SS "void dvb_desc_t2_delivery_free (const void * desc)"

.PP
Frees all data allocated by the T2 delivery system descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be freed 
.RE
.PP

.SS "int dvb_desc_t2_delivery_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, struct \fBdvb_extension_descriptor\fP * ext, void * desc)"

.PP
Initializes and parses the T2 delivery system descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the descriptor's raw data 
.br
\fIext\fP struct \fBdvb_extension_descriptor\fP pointer 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be allocated and filled
.RE
.PP
This function allocates a the descriptor and fills the fields inside the struct\&. It also makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void dvb_desc_t2_delivery_print (struct \fBdvb_v5_fe_parms\fP * parms, const struct \fBdvb_extension_descriptor\fP * ext, const void * desc)"

.PP
Prints the content of the T2 delivery system descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIext\fP struct \fBdvb_extension_descriptor\fP pointer 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP 
.RE
.PP

.SS "void dvb_desc_terrestrial_delivery_print (struct \fBdvb_v5_fe_parms\fP * parms, const struct \fBdvb_desc\fP * desc)"

.PP
Prints the content of the DVB-T terrestrial delivery system descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP 
.RE
.PP

.SS "void dvb_desc_ts_info_free (struct \fBdvb_desc\fP * desc)"

.PP
Frees all data allocated by the ISDB TS information descriptor\&. descriptor
.PP
\fBParameters:\fP
.RS 4
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be freed 
.RE
.PP

.SS "int dvb_desc_ts_info_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, struct \fBdvb_desc\fP * desc)"

.PP
Initializes and parses the ISDB TS information descriptor\&. descriptor
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the descriptor's raw data 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be allocated and filled
.RE
.PP
This function allocates a the descriptor and fills the fields inside the struct\&. It also makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void dvb_desc_ts_info_print (struct \fBdvb_v5_fe_parms\fP * parms, const struct \fBdvb_desc\fP * desc)"

.PP
Prints the content of the ISDB TS information descriptor\&. descriptor
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP 
.RE
.PP

.SS "void dvb_extension_descriptor_free (struct \fBdvb_desc\fP * desc)"

.PP
Frees all data allocated by the extended descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be freed 
.RE
.PP

.SS "int dvb_extension_descriptor_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, struct \fBdvb_desc\fP * desc)"

.PP
Initializes and parses the extended descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the descriptor's raw data 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be allocated and filled
.RE
.PP
This function allocates a the descriptor and fills the fields inside the struct\&. It also makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void dvb_extension_descriptor_print (struct \fBdvb_v5_fe_parms\fP * parms, const struct \fBdvb_desc\fP * desc)"

.PP
Prints the content of the extended descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP 
.RE
.PP

.SS "void isdb_desc_partial_reception_free (struct \fBdvb_desc\fP * desc)"

.PP
Frees all data allocated by the ISDB-T partial reception descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be freed 
.RE
.PP

.SS "int isdb_desc_partial_reception_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, struct \fBdvb_desc\fP * desc)"

.PP
Initializes and parses the ISDB-T partial reception descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the descriptor's raw data 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be allocated and filled
.RE
.PP
This function allocates a the descriptor and fills the fields inside the struct\&. It also makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void isdb_desc_partial_reception_print (struct \fBdvb_v5_fe_parms\fP * parms, const struct \fBdvb_desc\fP * desc)"

.PP
Prints the content of the ISDB-T partial reception descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP 
.RE
.PP

.SS "void isdbt_desc_delivery_free (struct \fBdvb_desc\fP * desc)"

.PP
Frees all data allocated by the ISDB-T terrestrial delivery system descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be freed 
.RE
.PP

.SS "int isdbt_desc_delivery_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, struct \fBdvb_desc\fP * desc)"

.PP
Initializes and parses the ISDB-T terrestrial delivery system descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the descriptor's raw data 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP to be allocated and filled
.RE
.PP
This function allocates a the descriptor and fills the fields inside the struct\&. It also makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void isdbt_desc_delivery_print (struct \fBdvb_v5_fe_parms\fP * parms, const struct \fBdvb_desc\fP * desc)"

.PP
Prints the content of the ISDB-T terrestrial delivery system descriptor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIdesc\fP pointer to struct \fBdvb_desc\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for libdvbv5 from the source code\&.
