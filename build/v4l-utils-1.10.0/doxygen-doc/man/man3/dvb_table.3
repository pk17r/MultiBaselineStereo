.TH "dvb_table" 3 "Sun Jan 24 2016" "Version 1.10.0" "libdvbv5" \" -*- nroff -*-
.ad l
.nh
.SH NAME
dvb_table \- Digital TV table parsing
.SS "Files"

.in +1c
.ti -1c
.RI "file \fBdescriptors\&.h\fP"
.br
.RI "\fIProvides a way to handle MPEG-TS descriptors found on Digital TV streams\&. \fP"
.ti -1c
.RI "file \fBheader\&.h\fP"
.br
.RI "\fIProvides the MPEG TS table headers\&. \fP"
.ti -1c
.RI "file \fBatsc_header\&.h\fP"
.br
.RI "\fIProvides some common ATSC stuff\&. \fP"
.ti -1c
.RI "file \fBatsc_eit\&.h\fP"
.br
.RI "\fIProvides the table parser for the ATSC EIT (Event Information Table) \fP"
.ti -1c
.RI "file \fBcat\&.h\fP"
.br
.RI "\fIProvides the table parser for the CAT (Conditional Access Table) \fP"
.ti -1c
.RI "file \fBeit\&.h\fP"
.br
.RI "\fIProvides the table parser for the DVB EIT (Event Information Table) \fP"
.ti -1c
.RI "file \fBmgt\&.h\fP"
.br
.RI "\fIProvides the table parser for the ATSC MGT (Master Guide Table) \fP"
.ti -1c
.RI "file \fBnit\&.h\fP"
.br
.RI "\fIProvides the descriptors for NIT MPEG-TS table\&. \fP"
.ti -1c
.RI "file \fBpat\&.h\fP"
.br
.RI "\fIProvides the descriptors for PAT MPEG-TS table\&. \fP"
.ti -1c
.RI "file \fBpmt\&.h\fP"
.br
.RI "\fIProvides the descriptors for PMT MPEG-TS table\&. \fP"
.ti -1c
.RI "file \fBsdt\&.h\fP"
.br
.RI "\fIProvides the descriptors for SDT MPEG-TS table\&. \fP"
.ti -1c
.RI "file \fBvct\&.h\fP"
.br
.RI "\fIProvides the descriptors for TVCT and CVCT tables\&. \fP"
.ti -1c
.RI "file \fBmpeg_es\&.h\fP"
.br
.RI "\fIProvides the table parser for the MPEG-TS Elementary Stream\&. \fP"
.ti -1c
.RI "file \fBmpeg_pes\&.h\fP"
.br
.RI "\fIProvides the table parser for the MPEG-PES Elementary Stream\&. \fP"
.ti -1c
.RI "file \fBmpeg_ts\&.h\fP"
.br
.RI "\fIProvides the table parser for the MPEG-PES Elementary Stream\&. \fP"
.in -1c
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBdvb_desc\fP"
.br
.RI "\fILinked list containing the several descriptors found on a MPEG-TS table\&. \fP"
.ti -1c
.RI "struct \fBdvb_descriptor\fP"
.br
.RI "\fIContains the parser information for the MPEG-TS parser code\&. \fP"
.ti -1c
.RI "struct \fBdvb_ts_packet_header\fP"
.br
.RI "\fIHeader of a MPEG-TS transport packet\&. \fP"
.ti -1c
.RI "struct \fBdvb_table_header\fP"
.br
.RI "\fIHeader of a MPEG-TS table\&. \fP"
.ti -1c
.RI "struct \fBatsc_table_eit_event\fP"
.br
.RI "\fIATSC EIT event table\&. \fP"
.ti -1c
.RI "union \fBatsc_table_eit_desc_length\fP"
.br
.RI "\fIATSC EIT descriptor length\&. \fP"
.ti -1c
.RI "struct \fBatsc_table_eit\fP"
.br
.RI "\fIATSC EIT table\&. \fP"
.ti -1c
.RI "struct \fBdvb_table_eit_event\fP"
.br
.RI "\fIDVB EIT event table\&. \fP"
.ti -1c
.RI "struct \fBdvb_table_eit\fP"
.br
.RI "\fIDVB EIT table\&. \fP"
.ti -1c
.RI "struct \fBatsc_table_mgt_table\fP"
.br
.RI "\fIATSC tables descrition at MGT table\&. \fP"
.ti -1c
.RI "struct \fBatsc_table_mgt\fP"
.br
.RI "\fIATSC MGT table\&. \fP"
.ti -1c
.RI "union \fBdvb_table_nit_transport_header\fP"
.br
.RI "\fIMPEG-TS NIT transport header\&. \fP"
.ti -1c
.RI "struct \fBdvb_table_nit_transport\fP"
.br
.RI "\fIMPEG-TS NIT transport table\&. \fP"
.ti -1c
.RI "struct \fBdvb_table_nit\fP"
.br
.RI "\fIMPEG-TS NIT table\&. \fP"
.ti -1c
.RI "struct \fBdvb_table_pat_program\fP"
.br
.RI "\fIMPEG-TS PAT program table\&. \fP"
.ti -1c
.RI "struct \fBdvb_table_pat\fP"
.br
.RI "\fIMPEG-TS PAT table\&. \fP"
.ti -1c
.RI "struct \fBdvb_table_pmt_stream\fP"
.br
.RI "\fIMPEG-TS PMT stream table\&. \fP"
.ti -1c
.RI "struct \fBdvb_table_pmt\fP"
.br
.RI "\fIMPEG-TS PMT table\&. \fP"
.ti -1c
.RI "struct \fBdvb_table_sdt_service\fP"
.br
.RI "\fIMPEG-TS SDT service table\&. \fP"
.ti -1c
.RI "struct \fBdvb_table_sdt\fP"
.br
.RI "\fIMPEG-TS SDT table\&. \fP"
.ti -1c
.RI "struct \fBatsc_table_vct_channel\fP"
.br
.RI "\fIATSC VCT channel table (covers both CVCT and TVCT) \fP"
.ti -1c
.RI "struct \fBatsc_table_vct\fP"
.br
.RI "\fIATSC VCT table (covers both CVCT and TVCT) \fP"
.ti -1c
.RI "union \fBatsc_table_vct_descriptor_length\fP"
.br
.RI "\fIATSC VCT descriptor length\&. \fP"
.ti -1c
.RI "struct \fBdvb_mpeg_es_seq_start\fP"
.br
.RI "\fIMPEG ES Sequence header\&. \fP"
.ti -1c
.RI "struct \fBdvb_mpeg_es_pic_start\fP"
.br
.RI "\fIMPEG ES Picture start header\&. \fP"
.ti -1c
.RI "struct \fBts_t\fP"
.br
.RI "\fIMPEG PES timestamp structure, used for dts and pts\&. \fP"
.ti -1c
.RI "struct \fBdvb_mpeg_pes_optional\fP"
.br
.RI "\fIMPEG PES optional header\&. \fP"
.ti -1c
.RI "struct \fBdvb_mpeg_pes\fP"
.br
.RI "\fIMPEG PES data structure\&. \fP"
.ti -1c
.RI "struct \fBdvb_mpeg_ts_adaption\fP"
.br
.RI "\fIMPEG TS header adaption field\&. \fP"
.ti -1c
.RI "struct \fBdvb_mpeg_ts\fP"
.br
.RI "\fIMPEG TS header\&. \fP"
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBDVB_MAX_PAYLOAD_PACKET_SIZE\fP"
.br
.RI "\fIMaximum size of a table session to be parsed\&. \fP"
.ti -1c
.RI "#define \fBDVB_CRC_SIZE\fP"
.br
.RI "\fInumber of bytes for the descriptor's CRC check \fP"
.ti -1c
.RI "#define \fBATSC_BASE_PID\fP"
.br
.RI "\fIATSC PID for the Program and System Information Protocol\&. \fP"
.ti -1c
.RI "#define \fBATSC_TABLE_EIT\fP"
.br
.RI "\fIATSC EIT table ID\&. \fP"
.ti -1c
.RI "#define \fBatsc_eit_event_foreach\fP(_event,  _eit)"
.br
.RI "\fIMacro used to find event on an ATSC EIT table\&. \fP"
.ti -1c
.RI "#define \fBDVB_TABLE_CAT\fP"
.br
.RI "\fIATSC CAT table ID\&. \fP"
.ti -1c
.RI "#define \fBDVB_TABLE_CAT_PID\fP"
.br
.RI "\fIATSC PID table ID\&. \fP"
.ti -1c
.RI "#define \fBDVB_TABLE_EIT\fP"
.br
.RI "\fIDVB EIT table ID for the actual TS\&. \fP"
.ti -1c
.RI "#define \fBDVB_TABLE_EIT_OTHER\fP"
.br
.RI "\fIDVB EIT table ID for other TS\&. \fP"
.ti -1c
.RI "#define \fBDVB_TABLE_EIT_PID\fP"
.br
.RI "\fIDVB EIT Program ID\&. \fP"
.ti -1c
.RI "#define \fBDVB_TABLE_EIT_SCHEDULE\fP"
.br
.RI "\fIStart table ID for the DVB EIT schedule data on the actual TS\&. \fP"
.ti -1c
.RI "#define \fBDVB_TABLE_EIT_SCHEDULE_OTHER\fP"
.br
.RI "\fIStart table ID for the DVB EIT schedule data on other TS\&. \fP"
.ti -1c
.RI "#define \fBdvb_eit_event_foreach\fP(_event,  _eit)"
.br
.RI "\fIMacro used to find event on a DVB EIT table\&. \fP"
.ti -1c
.RI "#define \fBATSC_TABLE_MGT\fP"
.br
.RI "\fIATSC MGT table ID\&. \fP"
.ti -1c
.RI "#define \fBDVB_TABLE_NIT\fP"
.br
.RI "\fINIT table ID\&. \fP"
.ti -1c
.RI "#define \fBDVB_TABLE_NIT2\fP"
.br
.RI "\fINIT table ID (alternative table ID) \fP"
.ti -1c
.RI "#define \fBDVB_TABLE_NIT_PID\fP"
.br
.RI "\fINIT Program ID\&. \fP"
.ti -1c
.RI "#define \fBdvb_nit_transport_foreach\fP(_tran,  _nit)"
.br
.RI "\fIMacro used to find a transport inside a NIT table\&. \fP"
.ti -1c
.RI "#define \fBDVB_TABLE_PAT\fP"
.br
.RI "\fIPAT table ID\&. \fP"
.ti -1c
.RI "#define \fBDVB_TABLE_PAT_PID\fP"
.br
.RI "\fIPAT Program ID\&. \fP"
.ti -1c
.RI "#define \fBdvb_pat_program_foreach\fP(_pgm,  _pat)"
.br
.RI "\fIMacro used to find programs on a PAT table\&. \fP"
.ti -1c
.RI "#define \fBDVB_TABLE_PMT\fP"
.br
.RI "\fIPMT table ID\&. \fP"
.ti -1c
.RI "#define \fBdvb_pmt_stream_foreach\fP(_stream,  _pmt)"
.br
.RI "\fIMacro used to find streams on a PMT table\&. \fP"
.ti -1c
.RI "#define \fBDVB_TABLE_SDT\fP"
.br
.RI "\fISDT table ID\&. \fP"
.ti -1c
.RI "#define \fBDVB_TABLE_SDT2\fP"
.br
.RI "\fISDT table ID (alternative table ID) \fP"
.ti -1c
.RI "#define \fBDVB_TABLE_SDT_PID\fP"
.br
.RI "\fISDT Program ID\&. \fP"
.ti -1c
.RI "#define \fBdvb_sdt_service_foreach\fP(_service,  _sdt)"
.br
.RI "\fIMacro used to find services on a SDT table\&. \fP"
.ti -1c
.RI "#define \fBATSC_TABLE_TVCT\fP"
.br
.RI "\fITVCT table ID\&. \fP"
.ti -1c
.RI "#define \fBATSC_TABLE_CVCT\fP"
.br
.RI "\fICVCT table ID\&. \fP"
.ti -1c
.RI "#define \fBATSC_TABLE_VCT_PID\fP"
.br
.RI "\fIProgram ID with the VCT tables on it\&. \fP"
.ti -1c
.RI "#define \fBatsc_vct_channel_foreach\fP(_channel,  _vct)"
.br
.RI "\fIMacro used to find channels on a VCT table\&. \fP"
.ti -1c
.RI "#define \fBDVB_MPEG_ES_PIC_START\fP"
.br
.RI "\fIPicture Start\&. \fP"
.ti -1c
.RI "#define \fBDVB_MPEG_ES_USER_DATA\fP"
.br
.RI "\fIUser Data\&. \fP"
.ti -1c
.RI "#define \fBDVB_MPEG_ES_SEQ_START\fP"
.br
.RI "\fISequence Start\&. \fP"
.ti -1c
.RI "#define \fBDVB_MPEG_ES_SEQ_EXT\fP"
.br
.RI "\fIExtension\&. \fP"
.ti -1c
.RI "#define \fBDVB_MPEG_ES_GOP\fP"
.br
.RI "\fIGroup Of Pictures\&. \fP"
.ti -1c
.RI "#define \fBDVB_MPEG_ES_SLICES\fP"
.br
.RI "\fISlices\&. \fP"
.ti -1c
.RI "#define \fBDVB_MPEG_PES\fP"
.br
.RI "\fIMPEG Packetized Elementary Stream magic\&. \fP"
.ti -1c
.RI "#define \fBDVB_MPEG_PES_AUDIO\fP"
.br
.RI "\fIPES Audio\&. \fP"
.ti -1c
.RI "#define \fBDVB_MPEG_PES_VIDEO\fP"
.br
.RI "\fIPES Video\&. \fP"
.ti -1c
.RI "#define \fBDVB_MPEG_STREAM_MAP\fP"
.br
.RI "\fIPES Stream map\&. \fP"
.ti -1c
.RI "#define \fBDVB_MPEG_STREAM_PADDING\fP"
.br
.RI "\fIPES padding\&. \fP"
.ti -1c
.RI "#define \fBDVB_MPEG_STREAM_PRIVATE_2\fP"
.br
.RI "\fIPES private\&. \fP"
.ti -1c
.RI "#define \fBDVB_MPEG_STREAM_ECM\fP"
.br
.RI "\fIPES ECM Stream\&. \fP"
.ti -1c
.RI "#define \fBDVB_MPEG_STREAM_EMM\fP"
.br
.RI "\fIPES EMM Stream\&. \fP"
.ti -1c
.RI "#define \fBDVB_MPEG_STREAM_DIRECTORY\fP"
.br
.RI "\fIPES Stream directory\&. \fP"
.ti -1c
.RI "#define \fBDVB_MPEG_STREAM_DSMCC\fP"
.br
.RI "\fIPES DSMCC\&. \fP"
.ti -1c
.RI "#define \fBDVB_MPEG_STREAM_H222E\fP"
.br
.RI "\fIPES H\&.222\&.1 type E\&. \fP"
.ti -1c
.RI "#define \fBDVB_MPEG_TS\fP"
.br
.RI "\fIMPEG Transport Stream magic\&. \fP"
.ti -1c
.RI "#define \fBDVB_MPEG_TS_PACKET_SIZE\fP"
.br
.RI "\fISize of an MPEG packet\&. \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void(* \fBdvb_table_init_func\fP) (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, ssize_t buflen, void **table)"
.br
.RI "\fIFunction prototype for a function that initializes the descriptors parsing on a table\&. \fP"
.ti -1c
.RI "typedef int(* \fBdvb_desc_init_func\fP) (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIFunction prototype for the descriptors parsing init code\&. \fP"
.ti -1c
.RI "typedef void(* \fBdvb_desc_print_func\fP) (struct \fBdvb_v5_fe_parms\fP *parms, const struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIFunction prototype for the descriptors parsing print code\&. \fP"
.ti -1c
.RI "typedef void(* \fBdvb_desc_free_func\fP) (struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIFunction prototype for the descriptors memory free code\&. \fP"
.ti -1c
.RI "typedef void \fBnit_handler_callback_t\fP(struct \fBdvb_table_nit\fP *nit, struct \fBdvb_desc\fP *desc, void *priv)"
.br
.RI "\fItypedef for a callback used when a NIT table entry is found \fP"
.ti -1c
.RI "typedef void \fBnit_tran_handler_callback_t\fP(struct \fBdvb_table_nit\fP *nit, struct \fBdvb_table_nit_transport\fP *tran, struct \fBdvb_desc\fP *desc, void *priv)"
.br
.RI "\fItypedef for a callback used when a NIT transport table entry is found \fP"
.ti -1c
.RI "typedef int(* \fBdvb_desc_ext_init_func\fP) (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, struct \fBdvb_extension_descriptor\fP *ext, void *desc)"
.br
.RI "\fIFunction prototype for the extended descriptors parsing init code\&. \fP"
.ti -1c
.RI "typedef void(* \fBdvb_desc_ext_print_func\fP) (struct \fBdvb_v5_fe_parms\fP *parms, const struct \fBdvb_extension_descriptor\fP *ext, const void *desc)"
.br
.RI "\fIFunction prototype for the extended descriptors parsing print code\&. \fP"
.ti -1c
.RI "typedef void(* \fBdvb_desc_ext_free_func\fP) (const void *desc)"
.br
.RI "\fIFunction prototype for the extended descriptors parsing free code\&. \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBdescriptors\fP { \fBvideo_stream_descriptor\fP, \fBaudio_stream_descriptor\fP, \fBhierarchy_descriptor\fP, \fBregistration_descriptor\fP, \fBds_alignment_descriptor\fP, \fBtarget_background_grid_descriptor\fP, \fBvideo_window_descriptor\fP, \fBconditional_access_descriptor\fP, \fBiso639_language_descriptor\fP, \fBsystem_clock_descriptor\fP, \fBmultiplex_buffer_utilization_descriptor\fP, \fBcopyright_descriptor\fP, \fBmaximum_bitrate_descriptor\fP, \fBprivate_data_indicator_descriptor\fP, \fBsmoothing_buffer_descriptor\fP, \fBstd_descriptor\fP, \fBibp_descriptor\fP, \fBmpeg4_video_descriptor\fP, \fBmpeg4_audio_descriptor\fP, \fBiod_descriptor\fP, \fBsl_descriptor\fP, \fBfmc_descriptor\fP, \fBexternal_es_id_descriptor\fP, \fBmuxcode_descriptor\fP, \fBfmxbuffersize_descriptor\fP, \fBmultiplexbuffer_descriptor\fP, \fBcontent_labeling_descriptor\fP, \fBmetadata_pointer_descriptor\fP, \fBmetadata_descriptor\fP, \fBmetadata_std_descriptor\fP, \fBAVC_video_descriptor\fP, \fBipmp_descriptor\fP, \fBAVC_timing_and_HRD_descriptor\fP, \fBmpeg2_aac_audio_descriptor\fP, \fBflexmux_timing_descriptor\fP, \fBnetwork_name_descriptor\fP, \fBservice_list_descriptor\fP, \fBstuffing_descriptor\fP, \fBsatellite_delivery_system_descriptor\fP, \fBcable_delivery_system_descriptor\fP, \fBVBI_data_descriptor\fP, \fBVBI_teletext_descriptor\fP, \fBbouquet_name_descriptor\fP, \fBservice_descriptor\fP, \fBcountry_availability_descriptor\fP, \fBlinkage_descriptor\fP, \fBNVOD_reference_descriptor\fP, \fBtime_shifted_service_descriptor\fP, \fBshort_event_descriptor\fP, \fBextended_event_descriptor\fP, \fBtime_shifted_event_descriptor\fP, \fBcomponent_descriptor\fP, \fBmosaic_descriptor\fP, \fBstream_identifier_descriptor\fP, \fBCA_identifier_descriptor\fP, \fBcontent_descriptor\fP, \fBparental_rating_descriptor\fP, \fBteletext_descriptor\fP, \fBtelephone_descriptor\fP, \fBlocal_time_offset_descriptor\fP, \fBsubtitling_descriptor\fP, \fBterrestrial_delivery_system_descriptor\fP, \fBmultilingual_network_name_descriptor\fP, \fBmultilingual_bouquet_name_descriptor\fP, \fBmultilingual_service_name_descriptor\fP, \fBmultilingual_component_descriptor\fP, \fBprivate_data_specifier_descriptor\fP, \fBservice_move_descriptor\fP, \fBshort_smoothing_buffer_descriptor\fP, \fBfrequency_list_descriptor\fP, \fBpartial_transport_stream_descriptor\fP, \fBdata_broadcast_descriptor\fP, \fBscrambling_descriptor\fP, \fBdata_broadcast_id_descriptor\fP, \fBtransport_stream_descriptor\fP, \fBDSNG_descriptor\fP, \fBPDC_descriptor\fP, \fBAC_3_descriptor\fP, \fBancillary_data_descriptor\fP, \fBcell_list_descriptor\fP, \fBcell_frequency_link_descriptor\fP, \fBannouncement_support_descriptor\fP, \fBapplication_signalling_descriptor\fP, \fBadaptation_field_data_descriptor\fP, \fBservice_identifier_descriptor\fP, \fBservice_availability_descriptor\fP, \fBdefault_authority_descriptor\fP, \fBrelated_content_descriptor\fP, \fBTVA_id_descriptor\fP, \fBcontent_identifier_descriptor\fP, \fBtime_slice_fec_identifier_descriptor\fP, \fBECM_repetition_rate_descriptor\fP, \fBS2_satellite_delivery_system_descriptor\fP, \fBenhanced_AC_3_descriptor\fP, \fBDTS_descriptor\fP, \fBAAC_descriptor\fP, \fBXAIT_location_descriptor\fP, \fBFTA_content_management_descriptor\fP, \fBextension_descriptor\fP, \fBCUE_identifier_descriptor\fP, \fBextended_channel_name\fP, \fBservice_location\fP, \fBcomponent_name_descriptor\fP, \fBlogical_channel_number_descriptor\fP, \fBcarousel_id_descriptor\fP, \fBassociation_tag_descriptor\fP, \fBdeferred_association_tags_descriptor\fP, \fBhierarchical_transmission_descriptor\fP, \fBdigital_copy_control_descriptor\fP, \fBnetwork_identifier_descriptor\fP, \fBpartial_transport_stream_time_descriptor\fP, \fBaudio_component_descriptor\fP, \fBhyperlink_descriptor\fP, \fBtarget_area_descriptor\fP, \fBdata_contents_descriptor\fP, \fBvideo_decode_control_descriptor\fP, \fBdownload_content_descriptor\fP, \fBCA_EMM_TS_descriptor\fP, \fBCA_contract_information_descriptor\fP, \fBCA_service_descriptor\fP, \fBTS_Information_descriptior\fP, \fBextended_broadcaster_descriptor\fP, \fBlogo_transmission_descriptor\fP, \fBbasic_local_event_descriptor\fP, \fBreference_descriptor\fP, \fBnode_relation_descriptor\fP, \fBshort_node_information_descriptor\fP, \fBSTC_reference_descriptor\fP, \fBseries_descriptor\fP, \fBevent_group_descriptor\fP, \fBSI_parameter_descriptor\fP, \fBbroadcaster_Name_Descriptor\fP, \fBcomponent_group_descriptor\fP, \fBSI_prime_TS_descriptor\fP, \fBboard_information_descriptor\fP, \fBLDT_linkage_descriptor\fP, \fBconnected_transmission_descriptor\fP, \fBcontent_availability_descriptor\fP, \fBservice_group_descriptor\fP, \fBcarousel_compatible_composite_descriptor\fP, \fBconditional_playback_descriptor\fP, \fBISDBT_delivery_system_descriptor\fP, \fBpartial_reception_descriptor\fP, \fBemergency_information_descriptor\fP, \fBdata_component_descriptor\fP, \fBsystem_management_descriptor\fP, \fBatsc_stuffing_descriptor\fP, \fBatsc_ac3_audio_descriptor\fP, \fBatsc_caption_service_descriptor\fP, \fBatsc_content_advisory_descriptor\fP, \fBatsc_extended_channel_descriptor\fP, \fBatsc_service_location_descriptor\fP, \fBatsc_time_shifted_service_descriptor\fP, \fBatsc_component_name_descriptor\fP, \fBatsc_DCC_departing_request_descriptor\fP, \fBatsc_DCC_arriving_request_descriptor\fP, \fBatsc_redistribution_control_descriptor\fP, \fBatsc_ATSC_private_information_descriptor\fP, \fBatsc_genre_descriptor\fP }
.RI "\fIList containing all descriptors used by Digital TV MPEG-TS\&. \fP""
.br
.ti -1c
.RI "enum \fBdvb_streams\fP { \fBstream_reserved0\fP, \fBstream_video\fP, \fBstream_video_h262\fP, \fBstream_audio\fP, \fBstream_audio_13818_3\fP, \fBstream_private_sections\fP, \fBstream_private_data\fP, \fBstream_mheg\fP, \fBstream_h222\fP, \fBstream_h222_1\fP, \fBstream_13818_6_A\fP, \fBstream_13818_6_B\fP, \fBstream_13818_6_C\fP, \fBstream_13818_6_D\fP, \fBstream_h222_aux\fP, \fBstream_audio_adts\fP, \fBstream_video_14496_2\fP, \fBstream_audio_latm\fP, \fBstream_14496_1_pes\fP, \fBstream_14496_1_iso\fP, \fBstream_download\fP, \fBstream_reserved\fP, \fBstream_private\fP }
.RI "\fIAdd support for MPEG-TS Stream types\&. \fP""
.br
.ti -1c
.RI "enum \fBdvb_mpeg_es_frame_t\fP { \fBDVB_MPEG_ES_FRAME_UNKNOWN\fP, \fBDVB_MPEG_ES_FRAME_I\fP, \fBDVB_MPEG_ES_FRAME_P\fP, \fBDVB_MPEG_ES_FRAME_B\fP, \fBDVB_MPEG_ES_FRAME_D\fP }
.RI "\fIMPEG frame types\&. \fP""
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "uint32_t \fBdvb_bcd\fP (uint32_t bcd)"
.br
.RI "\fIConverts from BCD to CPU integer internal representation\&. \fP"
.ti -1c
.RI "void \fBdvb_hexdump\fP (struct \fBdvb_v5_fe_parms\fP *parms, const char *prefix, const unsigned char *buf, int len)"
.br
.RI "\fIdumps data into the logs in hexadecimal format \fP"
.ti -1c
.RI "int \fBdvb_desc_parse\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, uint16_t buflen, struct \fBdvb_desc\fP **head_desc)"
.br
.RI "\fIparse MPEG-TS descriptors \fP"
.ti -1c
.RI "void \fBdvb_desc_free\fP (struct \fBdvb_desc\fP **list)"
.br
.RI "\fIfrees a \fBdvb_desc\fP linked list \fP"
.ti -1c
.RI "void \fBdvb_desc_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, struct \fBdvb_desc\fP *desc)"
.br
.RI "\fIprints the contents of a struct \fBdvb_desc\fP linked list \fP"
.ti -1c
.RI "void \fBdvb_table_header_init\fP (struct \fBdvb_table_header\fP *header)"
.br
.RI "\fIInitializes and parses MPEG-TS table header\&. \fP"
.ti -1c
.RI "void \fBdvb_table_header_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, const struct \fBdvb_table_header\fP *header)"
.br
.RI "\fIPrints the content of the MPEG-TS table header\&. \fP"
.ti -1c
.RI "ssize_t \fBatsc_table_eit_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, ssize_t buflen, struct \fBatsc_table_eit\fP **table)"
.br
.RI "\fIInitializes and parses ATSC EIT table\&. \fP"
.ti -1c
.RI "void \fBatsc_table_eit_free\fP (struct \fBatsc_table_eit\fP *table)"
.br
.RI "\fIFrees all data allocated by the ATSC EIT table parser\&. \fP"
.ti -1c
.RI "void \fBatsc_table_eit_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, struct \fBatsc_table_eit\fP *table)"
.br
.RI "\fIPrints the content of the ATSC EIT table\&. \fP"
.ti -1c
.RI "ssize_t \fBdvb_table_eit_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, ssize_t buflen, struct \fBdvb_table_eit\fP **table)"
.br
.RI "\fIInitializes and parses EIT table\&. \fP"
.ti -1c
.RI "void \fBdvb_table_eit_free\fP (struct \fBdvb_table_eit\fP *table)"
.br
.RI "\fIFrees all data allocated by the DVB EIT table parser\&. \fP"
.ti -1c
.RI "void \fBdvb_table_eit_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, struct \fBdvb_table_eit\fP *table)"
.br
.RI "\fIPrints the content of the DVB EIT table\&. \fP"
.ti -1c
.RI "void \fBdvb_time\fP (const uint8_t data[5], struct tm *tm)"
.br
.RI "\fIConverts a DVB EIT formatted timestamp into struct tm\&. \fP"
.ti -1c
.RI "ssize_t \fBatsc_table_mgt_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, ssize_t buflen, struct \fBatsc_table_mgt\fP **table)"
.br
.RI "\fIInitializes and parses MGT table\&. \fP"
.ti -1c
.RI "void \fBatsc_table_mgt_free\fP (struct \fBatsc_table_mgt\fP *table)"
.br
.RI "\fIFrees all data allocated by the MGT table parser\&. \fP"
.ti -1c
.RI "void \fBatsc_table_mgt_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, struct \fBatsc_table_mgt\fP *table)"
.br
.RI "\fIPrints the content of the MGT table\&. \fP"
.ti -1c
.RI "ssize_t \fBdvb_table_nit_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, ssize_t buflen, struct \fBdvb_table_nit\fP **table)"
.br
.RI "\fIInitializes and parses NIT table\&. \fP"
.ti -1c
.RI "void \fBdvb_table_nit_free\fP (struct \fBdvb_table_nit\fP *table)"
.br
.RI "\fIFrees all data allocated by the NIT table parser\&. \fP"
.ti -1c
.RI "void \fBdvb_table_nit_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, struct \fBdvb_table_nit\fP *table)"
.br
.RI "\fIPrints the content of the NIT table\&. \fP"
.ti -1c
.RI "void \fBdvb_table_nit_descriptor_handler\fP (struct \fBdvb_v5_fe_parms\fP *parms, struct \fBdvb_table_nit\fP *table, enum \fBdescriptors\fP descriptor, \fBnit_handler_callback_t\fP *call_nit, \fBnit_tran_handler_callback_t\fP *call_tran, void *priv)"
.br
.RI "\fIFor each entry at NIT and NIT transport tables, call a callback\&. \fP"
.ti -1c
.RI "ssize_t \fBdvb_table_pat_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, ssize_t buflen, struct \fBdvb_table_pat\fP **table)"
.br
.RI "\fIInitializes and parses PAT table\&. \fP"
.ti -1c
.RI "void \fBdvb_table_pat_free\fP (struct \fBdvb_table_pat\fP *table)"
.br
.RI "\fIFrees all data allocated by the PAT table parser\&. \fP"
.ti -1c
.RI "void \fBdvb_table_pat_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, struct \fBdvb_table_pat\fP *table)"
.br
.RI "\fIPrints the content of the PAT table\&. \fP"
.ti -1c
.RI "ssize_t \fBdvb_table_pmt_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, ssize_t buflen, struct \fBdvb_table_pmt\fP **table)"
.br
.RI "\fIInitializes and parses PMT table\&. \fP"
.ti -1c
.RI "void \fBdvb_table_pmt_free\fP (struct \fBdvb_table_pmt\fP *table)"
.br
.RI "\fIFrees all data allocated by the PMT table parser\&. \fP"
.ti -1c
.RI "void \fBdvb_table_pmt_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, const struct \fBdvb_table_pmt\fP *table)"
.br
.RI "\fIPrints the content of the PAT table\&. \fP"
.ti -1c
.RI "ssize_t \fBdvb_table_sdt_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, ssize_t buflen, struct \fBdvb_table_sdt\fP **table)"
.br
.RI "\fIInitializes and parses SDT table\&. \fP"
.ti -1c
.RI "void \fBdvb_table_sdt_free\fP (struct \fBdvb_table_sdt\fP *table)"
.br
.RI "\fIFrees all data allocated by the SDT table parser\&. \fP"
.ti -1c
.RI "void \fBdvb_table_sdt_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, struct \fBdvb_table_sdt\fP *table)"
.br
.RI "\fIPrints the content of the SDT table\&. \fP"
.ti -1c
.RI "ssize_t \fBatsc_table_vct_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, ssize_t buflen, struct \fBatsc_table_vct\fP **table)"
.br
.RI "\fIInitializes and parses VCT table\&. \fP"
.ti -1c
.RI "void \fBatsc_table_vct_free\fP (struct \fBatsc_table_vct\fP *table)"
.br
.RI "\fIFrees all data allocated by the VCT table parser\&. \fP"
.ti -1c
.RI "void \fBatsc_table_vct_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, struct \fBatsc_table_vct\fP *table)"
.br
.RI "\fIPrints the content of the VCT table\&. \fP"
.ti -1c
.RI "int \fBdvb_mpeg_es_seq_start_init\fP (const uint8_t *buf, ssize_t buflen, struct \fBdvb_mpeg_es_seq_start\fP *seq_start)"
.br
.RI "\fIInitialize a struct \fBdvb_mpeg_es_seq_start\fP from buffer\&. \fP"
.ti -1c
.RI "void \fBdvb_mpeg_es_seq_start_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, struct \fBdvb_mpeg_es_seq_start\fP *seq_start)"
.br
.RI "\fIPrint details of struct \fBdvb_mpeg_es_seq_start\fP\&. \fP"
.ti -1c
.RI "int \fBdvb_mpeg_es_pic_start_init\fP (const uint8_t *buf, ssize_t buflen, struct \fBdvb_mpeg_es_pic_start\fP *pic_start)"
.br
.RI "\fIInitialize a struct \fBdvb_mpeg_es_pic_start\fP from buffer\&. \fP"
.ti -1c
.RI "void \fBdvb_mpeg_es_pic_start_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, struct \fBdvb_mpeg_es_pic_start\fP *pic_start)"
.br
.RI "\fIPrint details of struct \fBdvb_mpeg_es_pic_start\fP\&. \fP"
.ti -1c
.RI "ssize_t \fBdvb_mpeg_pes_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, ssize_t buflen, uint8_t *table)"
.br
.RI "\fIInitialize a struct \fBdvb_mpeg_pes\fP from buffer\&. \fP"
.ti -1c
.RI "void \fBdvb_mpeg_pes_free\fP (struct \fBdvb_mpeg_pes\fP *pes)"
.br
.RI "\fIDeallocate memory associated with a struct \fBdvb_mpeg_pes\fP\&. \fP"
.ti -1c
.RI "void \fBdvb_mpeg_pes_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, struct \fBdvb_mpeg_pes\fP *pes)"
.br
.RI "\fIPrint details of struct \fBdvb_mpeg_pes\fP\&. \fP"
.ti -1c
.RI "ssize_t \fBdvb_mpeg_ts_init\fP (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, ssize_t buflen, uint8_t *table, ssize_t *table_length)"
.br
.RI "\fIInitialize a struct \fBdvb_mpeg_ts\fP from buffer\&. \fP"
.ti -1c
.RI "void \fBdvb_mpeg_ts_free\fP (struct \fBdvb_mpeg_ts\fP *ts)"
.br
.RI "\fIDeallocate memory associated with a struct \fBdvb_mpeg_ts\fP\&. \fP"
.ti -1c
.RI "void \fBdvb_mpeg_ts_print\fP (struct \fBdvb_v5_fe_parms\fP *parms, struct \fBdvb_mpeg_ts\fP *ts)"
.br
.RI "\fIPrint details of struct \fBdvb_mpeg_ts\fP\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const \fBdvb_table_init_func\fP \fBdvb_table_initializers\fP [256]"
.br
.RI "\fITable with all possible descriptors\&. \fP"
.ti -1c
.RI "const struct \fBdvb_descriptor\fP \fBdvb_descriptors\fP []"
.br
.RI "\fIContains the parsers for the several descriptors\&. \fP"
.ti -1c
.RI "const char * \fBpmt_stream_name\fP []"
.br
.RI "\fIConverts from enum dvb_streams into a string\&. \fP"
.ti -1c
.RI "const char * \fBdvb_mpeg_es_frame_names\fP [5]"
.br
.RI "\fIVector that translates from enum dvb_mpeg_es_frame_t to string\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SH "Macro Definition Documentation"
.PP 
.SS "#define ATSC_BASE_PID"

.PP
ATSC PID for the Program and System Information Protocol\&. 
.PP
Definition at line 45 of file atsc_header\&.h\&.
.SS "#define atsc_eit_event_foreach(_event, _eit)"

.PP
Macro used to find event on an ATSC EIT table\&. 
.PP
\fBParameters:\fP
.RS 4
\fI_event\fP event to seek 
.br
\fI_eit\fP pointer to struct \fBatsc_table_eit_event\fP 
.RE
.PP

.PP
Definition at line 161 of file atsc_eit\&.h\&.
.SS "#define ATSC_TABLE_CVCT"

.PP
CVCT table ID\&. 
.PP
Definition at line 61 of file vct\&.h\&.
.SS "#define ATSC_TABLE_EIT"

.PP
ATSC EIT table ID\&. 
.PP
Definition at line 54 of file atsc_eit\&.h\&.
.SS "#define ATSC_TABLE_MGT"

.PP
ATSC MGT table ID\&. 
.PP
Definition at line 52 of file mgt\&.h\&.
.SS "#define ATSC_TABLE_TVCT"

.PP
TVCT table ID\&. 
.PP
Definition at line 60 of file vct\&.h\&.
.SS "#define ATSC_TABLE_VCT_PID"

.PP
Program ID with the VCT tables on it\&. 
.PP
Definition at line 62 of file vct\&.h\&.
.SS "#define atsc_vct_channel_foreach(_channel, _vct)"

.PP
Macro used to find channels on a VCT table\&. 
.PP
\fBParameters:\fP
.RS 4
\fI_channel\fP channel to seek 
.br
\fI_vct\fP pointer to struct \fBatsc_table_vct_channel\fP 
.RE
.PP

.PP
Definition at line 203 of file vct\&.h\&.
.SS "#define DVB_CRC_SIZE"

.PP
number of bytes for the descriptor's CRC check 
.PP
Definition at line 62 of file descriptors\&.h\&.
.SS "#define dvb_eit_event_foreach(_event, _eit)"

.PP
Macro used to find event on a DVB EIT table\&. 
.PP
\fBParameters:\fP
.RS 4
\fI_event\fP event to seek 
.br
\fI_eit\fP pointer to struct \fBdvb_table_eit_event\fP 
.RE
.PP

.PP
Definition at line 161 of file eit\&.h\&.
.SS "#define DVB_MAX_PAYLOAD_PACKET_SIZE"

.PP
Maximum size of a table session to be parsed\&. 
.PP
Definition at line 56 of file descriptors\&.h\&.
.SS "#define DVB_MPEG_ES_GOP"

.PP
Group Of Pictures\&. 
.PP
Definition at line 68 of file mpeg_es\&.h\&.
.SS "#define DVB_MPEG_ES_PIC_START"

.PP
Picture Start\&. 
.PP
Definition at line 64 of file mpeg_es\&.h\&.
.SS "#define DVB_MPEG_ES_SEQ_EXT"

.PP
Extension\&. 
.PP
Definition at line 67 of file mpeg_es\&.h\&.
.SS "#define DVB_MPEG_ES_SEQ_START"

.PP
Sequence Start\&. 
.PP
Definition at line 66 of file mpeg_es\&.h\&.
.SS "#define DVB_MPEG_ES_SLICES"

.PP
Slices\&. 
.PP
Definition at line 69 of file mpeg_es\&.h\&.
.SS "#define DVB_MPEG_ES_USER_DATA"

.PP
User Data\&. 
.PP
Definition at line 65 of file mpeg_es\&.h\&.
.SS "#define DVB_MPEG_PES"

.PP
MPEG Packetized Elementary Stream magic\&. 
.PP
Definition at line 81 of file mpeg_pes\&.h\&.
.SS "#define DVB_MPEG_PES_AUDIO"

.PP
PES Audio\&. 
.PP
Definition at line 83 of file mpeg_pes\&.h\&.
.SS "#define DVB_MPEG_PES_VIDEO"

.PP
PES Video\&. 
.PP
Definition at line 84 of file mpeg_pes\&.h\&.
.SS "#define DVB_MPEG_STREAM_DIRECTORY"

.PP
PES Stream directory\&. 
.PP
Definition at line 91 of file mpeg_pes\&.h\&.
.SS "#define DVB_MPEG_STREAM_DSMCC"

.PP
PES DSMCC\&. 
.PP
Definition at line 92 of file mpeg_pes\&.h\&.
.SS "#define DVB_MPEG_STREAM_ECM"

.PP
PES ECM Stream\&. 
.PP
Definition at line 89 of file mpeg_pes\&.h\&.
.SS "#define DVB_MPEG_STREAM_EMM"

.PP
PES EMM Stream\&. 
.PP
Definition at line 90 of file mpeg_pes\&.h\&.
.SS "#define DVB_MPEG_STREAM_H222E"

.PP
PES H\&.222\&.1 type E\&. 
.PP
Definition at line 93 of file mpeg_pes\&.h\&.
.SS "#define DVB_MPEG_STREAM_MAP"

.PP
PES Stream map\&. 
.PP
Definition at line 86 of file mpeg_pes\&.h\&.
.SS "#define DVB_MPEG_STREAM_PADDING"

.PP
PES padding\&. 
.PP
Definition at line 87 of file mpeg_pes\&.h\&.
.SS "#define DVB_MPEG_STREAM_PRIVATE_2"

.PP
PES private\&. 
.PP
Definition at line 88 of file mpeg_pes\&.h\&.
.SS "#define DVB_MPEG_TS"

.PP
MPEG Transport Stream magic\&. 
.PP
Definition at line 51 of file mpeg_ts\&.h\&.
.SS "#define DVB_MPEG_TS_PACKET_SIZE"

.PP
Size of an MPEG packet\&. 
.PP
Definition at line 52 of file mpeg_ts\&.h\&.
.SS "#define dvb_nit_transport_foreach(_tran, _nit)"

.PP
Macro used to find a transport inside a NIT table\&. 
.PP
\fBParameters:\fP
.RS 4
\fI_tran\fP transport to seek 
.br
\fI_nit\fP pointer to struct \fBdvb_table_nit_transport\fP 
.RE
.PP

.PP
Definition at line 190 of file nit\&.h\&.
.SS "#define dvb_pat_program_foreach(_pgm, _pat)"

.PP
Macro used to find programs on a PAT table\&. 
.PP
\fBParameters:\fP
.RS 4
\fI_pgm\fP program to seek 
.br
\fI_pat\fP pointer to struct \fBdvb_table_pat_program\fP 
.RE
.PP

.PP
Definition at line 122 of file pat\&.h\&.
.SS "#define dvb_pmt_stream_foreach(_stream, _pmt)"

.PP
Macro used to find streams on a PMT table\&. 
.PP
\fBParameters:\fP
.RS 4
\fI_stream\fP stream to seek 
.br
\fI_pmt\fP pointer to struct \fBdvb_table_pmt_stream\fP 
.RE
.PP

.PP
Definition at line 239 of file pmt\&.h\&.
.SS "#define dvb_sdt_service_foreach(_service, _sdt)"

.PP
Macro used to find services on a SDT table\&. 
.PP
\fBParameters:\fP
.RS 4
\fI_service\fP service to seek 
.br
\fI_sdt\fP pointer to struct \fBdvb_table_sdt_service\fP 
.RE
.PP

.PP
Definition at line 138 of file sdt\&.h\&.
.SS "#define DVB_TABLE_CAT"

.PP
ATSC CAT table ID\&. 
.PP
Definition at line 48 of file cat\&.h\&.
.SS "#define DVB_TABLE_CAT_PID"

.PP
ATSC PID table ID\&. 
.PP
Definition at line 49 of file cat\&.h\&.
.SS "#define DVB_TABLE_EIT"

.PP
DVB EIT table ID for the actual TS\&. 
.PP
Definition at line 67 of file eit\&.h\&.
.SS "#define DVB_TABLE_EIT_OTHER"

.PP
DVB EIT table ID for other TS\&. 
.PP
Definition at line 68 of file eit\&.h\&.
.SS "#define DVB_TABLE_EIT_PID"

.PP
DVB EIT Program ID\&. 
.PP
Definition at line 69 of file eit\&.h\&.
.SS "#define DVB_TABLE_EIT_SCHEDULE"

.PP
Start table ID for the DVB EIT schedule data on the actual TS\&. 
.PP
Definition at line 71 of file eit\&.h\&.
.SS "#define DVB_TABLE_EIT_SCHEDULE_OTHER"

.PP
Start table ID for the DVB EIT schedule data on other TS\&. 
.PP
Definition at line 72 of file eit\&.h\&.
.SS "#define DVB_TABLE_NIT"

.PP
NIT table ID\&. 
.PP
Definition at line 62 of file nit\&.h\&.
.SS "#define DVB_TABLE_NIT2"

.PP
NIT table ID (alternative table ID) 
.PP
Definition at line 63 of file nit\&.h\&.
.SS "#define DVB_TABLE_NIT_PID"

.PP
NIT Program ID\&. 
.PP
Definition at line 64 of file nit\&.h\&.
.SS "#define DVB_TABLE_PAT"

.PP
PAT table ID\&. 
.PP
Definition at line 56 of file pat\&.h\&.
.SS "#define DVB_TABLE_PAT_PID"

.PP
PAT Program ID\&. 
.PP
Definition at line 57 of file pat\&.h\&.
.SS "#define DVB_TABLE_PMT"

.PP
PMT table ID\&. 
.PP
Definition at line 53 of file pmt\&.h\&.
.SS "#define DVB_TABLE_SDT"

.PP
SDT table ID\&. 
.PP
Definition at line 59 of file sdt\&.h\&.
.SS "#define DVB_TABLE_SDT2"

.PP
SDT table ID (alternative table ID) 
.PP
Definition at line 60 of file sdt\&.h\&.
.SS "#define DVB_TABLE_SDT_PID"

.PP
SDT Program ID\&. 
.PP
Definition at line 61 of file sdt\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef void(* dvb_desc_ext_free_func) (const void *desc)"

.PP
Function prototype for the extended descriptors parsing free code\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdesc\fP struct \fBdvb_desc\fP pointer 
.RE
.PP

.PP
Definition at line 158 of file desc_extension\&.h\&.
.SS "typedef int(* dvb_desc_ext_init_func) (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, struct \fBdvb_extension_descriptor\fP *ext, void *desc)"

.PP
Function prototype for the extended descriptors parsing init code\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP Struct \fBdvb_v5_fe_parms\fP pointer 
.br
\fIbuf\fP buffer with the content of the descriptor 
.br
\fIext\fP struct \fBdvb_extension_descriptor\fP pointer 
.br
\fIdesc\fP struct \fBdvb_desc\fP pointer 
.RE
.PP

.PP
Definition at line 136 of file desc_extension\&.h\&.
.SS "typedef void(* dvb_desc_ext_print_func) (struct \fBdvb_v5_fe_parms\fP *parms, const struct \fBdvb_extension_descriptor\fP *ext, const void *desc)"

.PP
Function prototype for the extended descriptors parsing print code\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP Struct \fBdvb_v5_fe_parms\fP pointer 
.br
\fIbuf\fP buffer with the content of the descriptor 
.br
\fIext\fP struct \fBdvb_extension_descriptor\fP pointer 
.br
\fIdesc\fP struct \fBdvb_desc\fP pointer 
.RE
.PP

.PP
Definition at line 149 of file desc_extension\&.h\&.
.SS "typedef void(* dvb_desc_free_func) (struct \fBdvb_desc\fP *desc)"

.PP
Function prototype for the descriptors memory free code\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdesc\fP pointer to struct \fBdvb_desc\fP pointer to be freed 
.RE
.PP

.PP
Definition at line 233 of file descriptors\&.h\&.
.SS "typedef int(* dvb_desc_init_func) (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, struct \fBdvb_desc\fP *desc)"

.PP
Function prototype for the descriptors parsing init code\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP Struct \fBdvb_v5_fe_parms\fP pointer 
.br
\fIbuf\fP buffer with the content of the descriptor 
.br
\fIdesc\fP struct \fBdvb_desc\fP pointer 
.RE
.PP

.PP
Definition at line 214 of file descriptors\&.h\&.
.SS "typedef void(* dvb_desc_print_func) (struct \fBdvb_v5_fe_parms\fP *parms, const struct \fBdvb_desc\fP *desc)"

.PP
Function prototype for the descriptors parsing print code\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP Struct \fBdvb_v5_fe_parms\fP pointer 
.br
\fIdesc\fP struct \fBdvb_desc\fP pointer 
.RE
.PP

.PP
Definition at line 224 of file descriptors\&.h\&.
.SS "typedef void(* dvb_table_init_func) (struct \fBdvb_v5_fe_parms\fP *parms, const uint8_t *buf, ssize_t buflen, void **table)"

.PP
Function prototype for a function that initializes the descriptors parsing on a table\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP Struct \fBdvb_v5_fe_parms\fP pointer 
.br
\fIbuf\fP Buffer with data to be parsed 
.br
\fIbuflen\fP Size of the buffer to be parsed 
.br
\fItable\fP pointer to a place where the allocated memory with the table structure will be stored\&. 
.RE
.PP

.PP
Definition at line 80 of file descriptors\&.h\&.
.SS "typedef void nit_handler_callback_t(struct \fBdvb_table_nit\fP *nit, struct \fBdvb_desc\fP *desc, void *priv)"

.PP
typedef for a callback used when a NIT table entry is found 
.PP
\fBParameters:\fP
.RS 4
\fInit\fP a struct \fBdvb_table_nit\fP pointer 
.br
\fIdesc\fP a struct \fBdvb_desc\fP pointer 
.br
\fIpriv\fP an opaque optional pointer 
.RE
.PP

.PP
Definition at line 165 of file nit\&.h\&.
.SS "typedef void nit_tran_handler_callback_t(struct \fBdvb_table_nit\fP *nit, struct \fBdvb_table_nit_transport\fP *tran, struct \fBdvb_desc\fP *desc, void *priv)"

.PP
typedef for a callback used when a NIT transport table entry is found 
.PP
\fBParameters:\fP
.RS 4
\fInit\fP a struct \fBdvb_table_nit\fP pointer 
.br
\fItran\fP a struct \fBdvb_table_nit_transport\fP pointer 
.br
\fIdesc\fP a struct \fBdvb_desc\fP pointer 
.br
\fIpriv\fP an opaque optional pointer 
.RE
.PP

.PP
Definition at line 178 of file nit\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBdescriptors\fP"

.PP
List containing all descriptors used by Digital TV MPEG-TS\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIvideo_stream_descriptor \fP\fP
video_stream descriptor - ISO/IEC 13818-1 
.TP
\fB\fIaudio_stream_descriptor \fP\fP
audio_stream descriptor - ISO/IEC 13818-1 
.TP
\fB\fIhierarchy_descriptor \fP\fP
hierarchy descriptor - ISO/IEC 13818-1 
.TP
\fB\fIregistration_descriptor \fP\fP
registration descriptor - ISO/IEC 13818-1 
.TP
\fB\fIds_alignment_descriptor \fP\fP
ds_alignment descriptor - ISO/IEC 13818-1 
.TP
\fB\fItarget_background_grid_descriptor \fP\fP
target_background_grid descriptor - ISO/IEC 13818-1 
.TP
\fB\fIvideo_window_descriptor \fP\fP
video_window descriptor - ISO/IEC 13818-1 
.TP
\fB\fIconditional_access_descriptor \fP\fP
conditional_access descriptor - ISO/IEC 13818-1 
.TP
\fB\fIiso639_language_descriptor \fP\fP
iso639_language descriptor - ISO/IEC 13818-1 
.TP
\fB\fIsystem_clock_descriptor \fP\fP
system_clock descriptor - ISO/IEC 13818-1 
.TP
\fB\fImultiplex_buffer_utilization_descriptor \fP\fP
multiplex_buffer_utilization descriptor - ISO/IEC 13818-1 
.TP
\fB\fIcopyright_descriptor \fP\fP
copyright descriptor - ISO/IEC 13818-1 
.TP
\fB\fImaximum_bitrate_descriptor \fP\fP
maximum_bitrate descriptor - ISO/IEC 13818-1 
.TP
\fB\fIprivate_data_indicator_descriptor \fP\fP
private_data_indicator descriptor - ISO/IEC 13818-1 
.TP
\fB\fIsmoothing_buffer_descriptor \fP\fP
smoothing_buffer descriptor - ISO/IEC 13818-1 
.TP
\fB\fIstd_descriptor \fP\fP
std descriptor - ISO/IEC 13818-1 
.TP
\fB\fIibp_descriptor \fP\fP
ibp descriptor - ISO/IEC 13818-1 
.TP
\fB\fImpeg4_video_descriptor \fP\fP
mpeg4_video descriptor - ISO/IEC 13818-1 
.TP
\fB\fImpeg4_audio_descriptor \fP\fP
mpeg4_audio descriptor - ISO/IEC 13818-1 
.TP
\fB\fIiod_descriptor \fP\fP
iod descriptor - ISO/IEC 13818-1 
.TP
\fB\fIsl_descriptor \fP\fP
sl descriptor - ISO/IEC 13818-1 
.TP
\fB\fIfmc_descriptor \fP\fP
fmc descriptor - ISO/IEC 13818-1 
.TP
\fB\fIexternal_es_id_descriptor \fP\fP
external_es_id descriptor - ISO/IEC 13818-1 
.TP
\fB\fImuxcode_descriptor \fP\fP
muxcode descriptor - ISO/IEC 13818-1 
.TP
\fB\fIfmxbuffersize_descriptor \fP\fP
fmxbuffersize descriptor - ISO/IEC 13818-1 
.TP
\fB\fImultiplexbuffer_descriptor \fP\fP
multiplexbuffer descriptor - ISO/IEC 13818-1 
.TP
\fB\fIcontent_labeling_descriptor \fP\fP
content_labeling descriptor - ISO/IEC 13818-1 
.TP
\fB\fImetadata_pointer_descriptor \fP\fP
metadata_pointer descriptor - ISO/IEC 13818-1 
.TP
\fB\fImetadata_descriptor \fP\fP
metadata descriptor - ISO/IEC 13818-1 
.TP
\fB\fImetadata_std_descriptor \fP\fP
metadata_std descriptor - ISO/IEC 13818-1 
.TP
\fB\fIAVC_video_descriptor \fP\fP
AVC_video descriptor - ISO/IEC 13818-1\&. 
.TP
\fB\fIipmp_descriptor \fP\fP
ipmp descriptor - ISO/IEC 13818-1 
.TP
\fB\fIAVC_timing_and_HRD_descriptor \fP\fP
AVC_timing_and_HRD descriptor - ISO/IEC 13818-1\&. 
.TP
\fB\fImpeg2_aac_audio_descriptor \fP\fP
mpeg2_aac_audio descriptor - ISO/IEC 13818-1 
.TP
\fB\fIflexmux_timing_descriptor \fP\fP
flexmux_timing descriptor - ISO/IEC 13818-1 
.TP
\fB\fInetwork_name_descriptor \fP\fP
network_name descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIservice_list_descriptor \fP\fP
service_list descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIstuffing_descriptor \fP\fP
stuffing descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIsatellite_delivery_system_descriptor \fP\fP
satellite_delivery_system descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIcable_delivery_system_descriptor \fP\fP
cable_delivery_system descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIVBI_data_descriptor \fP\fP
VBI_data descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIVBI_teletext_descriptor \fP\fP
VBI_teletext descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIbouquet_name_descriptor \fP\fP
bouquet_name descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIservice_descriptor \fP\fP
service descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIcountry_availability_descriptor \fP\fP
country_availability descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIlinkage_descriptor \fP\fP
linkage descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fINVOD_reference_descriptor \fP\fP
NVOD_reference descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fItime_shifted_service_descriptor \fP\fP
time_shifted_service descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIshort_event_descriptor \fP\fP
short_event descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIextended_event_descriptor \fP\fP
extended_event descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fItime_shifted_event_descriptor \fP\fP
time_shifted_event descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIcomponent_descriptor \fP\fP
component descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fImosaic_descriptor \fP\fP
mosaic descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIstream_identifier_descriptor \fP\fP
stream_identifier descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fICA_identifier_descriptor \fP\fP
CA_identifier descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIcontent_descriptor \fP\fP
content descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIparental_rating_descriptor \fP\fP
parental_rating descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIteletext_descriptor \fP\fP
teletext descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fItelephone_descriptor \fP\fP
telephone descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIlocal_time_offset_descriptor \fP\fP
local_time_offset descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIsubtitling_descriptor \fP\fP
subtitling descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIterrestrial_delivery_system_descriptor \fP\fP
terrestrial_delivery_system descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fImultilingual_network_name_descriptor \fP\fP
multilingual_network_name descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fImultilingual_bouquet_name_descriptor \fP\fP
multilingual_bouquet_name descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fImultilingual_service_name_descriptor \fP\fP
multilingual_service_name descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fImultilingual_component_descriptor \fP\fP
multilingual_component descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIprivate_data_specifier_descriptor \fP\fP
private_data_specifier descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIservice_move_descriptor \fP\fP
service_move descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIshort_smoothing_buffer_descriptor \fP\fP
short_smoothing_buffer descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIfrequency_list_descriptor \fP\fP
frequency_list descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIpartial_transport_stream_descriptor \fP\fP
partial_transport_stream descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIdata_broadcast_descriptor \fP\fP
data_broadcast descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIscrambling_descriptor \fP\fP
scrambling descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIdata_broadcast_id_descriptor \fP\fP
data_broadcast_id descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fItransport_stream_descriptor \fP\fP
transport_stream descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIDSNG_descriptor \fP\fP
DSNG descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIPDC_descriptor \fP\fP
PDC descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIAC_3_descriptor \fP\fP
AC_3 descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIancillary_data_descriptor \fP\fP
ancillary_data descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIcell_list_descriptor \fP\fP
cell_list descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIcell_frequency_link_descriptor \fP\fP
cell_frequency_link descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIannouncement_support_descriptor \fP\fP
announcement_support descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIapplication_signalling_descriptor \fP\fP
application_signalling descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIadaptation_field_data_descriptor \fP\fP
adaptation_field_data descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIservice_identifier_descriptor \fP\fP
service_identifier descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIservice_availability_descriptor \fP\fP
service_availability descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIdefault_authority_descriptor \fP\fP
default_authority descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIrelated_content_descriptor \fP\fP
related_content descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fITVA_id_descriptor \fP\fP
TVA_id descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIcontent_identifier_descriptor \fP\fP
content_identifier descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fItime_slice_fec_identifier_descriptor \fP\fP
time_slice_fec_identifier descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIECM_repetition_rate_descriptor \fP\fP
ECM_repetition_rate descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIS2_satellite_delivery_system_descriptor \fP\fP
S2_satellite_delivery_system descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIenhanced_AC_3_descriptor \fP\fP
enhanced_AC_3 descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIDTS_descriptor \fP\fP
DTS descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIAAC_descriptor \fP\fP
AAC descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIXAIT_location_descriptor \fP\fP
XAIT_location descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIFTA_content_management_descriptor \fP\fP
FTA_content_management descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fIextension_descriptor \fP\fP
extension descriptor - ETSI EN 300 468 V1\&.11\&.1 (2010-04) 
.TP
\fB\fICUE_identifier_descriptor \fP\fP
CUE_identifier descriptor - SCTE 35 2004\&. 
.TP
\fB\fIextended_channel_name \fP\fP
extended_channel_name descriptor - SCTE 35 2004 
.TP
\fB\fIservice_location \fP\fP
service_location descriptor - SCTE 35 2004 
.TP
\fB\fIcomponent_name_descriptor \fP\fP
component_name descriptor - SCTE 35 2004 
.PP
\fBSee also:\fP
.RS 4
http://www.etherguidesystems.com/Help/SDOs/ATSC/Semantics/Descriptors/Default.aspx 
.RE
.PP

.TP
\fB\fIlogical_channel_number_descriptor \fP\fP
logical_channel_number descriptor - SCTE 35 2004 
.PP
\fBSee also:\fP
.RS 4
http://www.coolstf.com/tsreader/descriptors.html 
.RE
.PP

.TP
\fB\fIcarousel_id_descriptor \fP\fP
carousel_id descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIassociation_tag_descriptor \fP\fP
association_tag descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIdeferred_association_tags_descriptor \fP\fP
deferred_association_tags descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIhierarchical_transmission_descriptor \fP\fP
hierarchical_transmission descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIdigital_copy_control_descriptor \fP\fP
digital_copy_control descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fInetwork_identifier_descriptor \fP\fP
network_identifier descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIpartial_transport_stream_time_descriptor \fP\fP
partial_transport_stream_time descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIaudio_component_descriptor \fP\fP
audio_component descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIhyperlink_descriptor \fP\fP
hyperlink descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fItarget_area_descriptor \fP\fP
target_area descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIdata_contents_descriptor \fP\fP
data_contents descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIvideo_decode_control_descriptor \fP\fP
video_decode_control descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIdownload_content_descriptor \fP\fP
download_content descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fICA_EMM_TS_descriptor \fP\fP
CA_EMM_TS descriptor - ABNT NBR 15603-1 2007\&. 
.TP
\fB\fICA_contract_information_descriptor \fP\fP
CA_contract_information descriptor - ABNT NBR 15603-1 2007\&. 
.TP
\fB\fICA_service_descriptor \fP\fP
CA_service descriptor - ABNT NBR 15603-1 2007\&. 
.TP
\fB\fITS_Information_descriptior \fP\fP
transport_stream_information descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIextended_broadcaster_descriptor \fP\fP
extended_broadcaster descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIlogo_transmission_descriptor \fP\fP
logo_transmission descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIbasic_local_event_descriptor \fP\fP
basic_local_event descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIreference_descriptor \fP\fP
reference descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fInode_relation_descriptor \fP\fP
node_relation descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIshort_node_information_descriptor \fP\fP
short_node_information descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fISTC_reference_descriptor \fP\fP
STC_reference descriptor - ABNT NBR 15603-1 2007\&. 
.TP
\fB\fIseries_descriptor \fP\fP
series descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIevent_group_descriptor \fP\fP
event_group descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fISI_parameter_descriptor \fP\fP
SI_parameter descriptor - ABNT NBR 15603-1 2007\&. 
.TP
\fB\fIbroadcaster_Name_Descriptor \fP\fP
broadcaster_Name descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIcomponent_group_descriptor \fP\fP
component_group descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fISI_prime_TS_descriptor \fP\fP
SI_prime_transport_stream descriptor - ABNT NBR 15603-1 2007\&. 
.TP
\fB\fIboard_information_descriptor \fP\fP
board_information descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fILDT_linkage_descriptor \fP\fP
LDT_linkage descriptor - ABNT NBR 15603-1 2007\&. 
.TP
\fB\fIconnected_transmission_descriptor \fP\fP
connected_transmission descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIcontent_availability_descriptor \fP\fP
content_availability descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIservice_group_descriptor \fP\fP
service_group descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIcarousel_compatible_composite_descriptor \fP\fP
carousel_compatible_composite descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIconditional_playback_descriptor \fP\fP
conditional_playback descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIISDBT_delivery_system_descriptor \fP\fP
ISDBT terrestrial_delivery_system descriptor - ABNT NBR 15603-1 2007\&. 
.TP
\fB\fIpartial_reception_descriptor \fP\fP
partial_reception descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIemergency_information_descriptor \fP\fP
emergency_information descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIdata_component_descriptor \fP\fP
data_component descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIsystem_management_descriptor \fP\fP
system_management descriptor - ABNT NBR 15603-1 2007 
.TP
\fB\fIatsc_stuffing_descriptor \fP\fP
atsc_stuffing descriptor - ATSC A/65:2009 
.TP
\fB\fIatsc_ac3_audio_descriptor \fP\fP
atsc_ac3_audio descriptor - ATSC A/65:2009 
.TP
\fB\fIatsc_caption_service_descriptor \fP\fP
atsc_caption_service descriptor - ATSC A/65:2009 
.TP
\fB\fIatsc_content_advisory_descriptor \fP\fP
atsc_content_advisory descriptor - ATSC A/65:2009 
.TP
\fB\fIatsc_extended_channel_descriptor \fP\fP
atsc_extended_channel descriptor - ATSC A/65:2009 
.TP
\fB\fIatsc_service_location_descriptor \fP\fP
atsc_service_location descriptor - ATSC A/65:2009 
.TP
\fB\fIatsc_time_shifted_service_descriptor \fP\fP
atsc_time_shifted_service descriptor - ATSC A/65:2009 
.TP
\fB\fIatsc_component_name_descriptor \fP\fP
atsc_component_name descriptor - ATSC A/65:2009 
.TP
\fB\fIatsc_DCC_departing_request_descriptor \fP\fP
atsc_DCC_departing_request descriptor - ATSC A/65:2009 
.TP
\fB\fIatsc_DCC_arriving_request_descriptor \fP\fP
atsc_DCC_arriving_request descriptor - ATSC A/65:2009 
.TP
\fB\fIatsc_redistribution_control_descriptor \fP\fP
atsc_redistribution_control descriptor - ATSC A/65:2009 
.TP
\fB\fIatsc_ATSC_private_information_descriptor \fP\fP
atsc_ATSC_private_information descriptor - ATSC A/65:2009 
.TP
\fB\fIatsc_genre_descriptor \fP\fP
atsc_genre descriptor - ATSC A/65:2009 
.PP
Definition at line 591 of file descriptors\&.h\&.
.SS "enum \fBdvb_mpeg_es_frame_t\fP"

.PP
MPEG frame types\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIDVB_MPEG_ES_FRAME_UNKNOWN \fP\fP
Unknown frame\&. 
.TP
\fB\fIDVB_MPEG_ES_FRAME_I \fP\fP
I frame\&. 
.TP
\fB\fIDVB_MPEG_ES_FRAME_P \fP\fP
P frame\&. 
.TP
\fB\fIDVB_MPEG_ES_FRAME_B \fP\fP
B frame\&. 
.TP
\fB\fIDVB_MPEG_ES_FRAME_D \fP\fP
D frame\&. 
.PP
Definition at line 166 of file mpeg_es\&.h\&.
.SS "enum \fBdvb_streams\fP"

.PP
Add support for MPEG-TS Stream types\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIstream_reserved0 \fP\fP
ITU-T | ISO/IEC Reserved\&. 
.TP
\fB\fIstream_video \fP\fP
ISO/IEC 11172 Video\&. 
.TP
\fB\fIstream_video_h262 \fP\fP
ITU-T Rec\&. H\&.262 | ISO/IEC 13818-2 Video or ISO/IEC 11172-2 constrained parameter video stream 
.TP
\fB\fIstream_audio \fP\fP
ISO/IEC 11172 Audio\&. 
.TP
\fB\fIstream_audio_13818_3 \fP\fP
ISO/IEC 13818-3 Audio\&. 
.TP
\fB\fIstream_private_sections \fP\fP
ITU-T Rec\&. H\&.222\&.0 | ISO/IEC 13818-1 private_sections 
.TP
\fB\fIstream_private_data \fP\fP
ITU-T Rec\&. H\&.222\&.0 | ISO/IEC 13818-1 PES packets containing private data 
.TP
\fB\fIstream_mheg \fP\fP
ISO/IEC 13522 MHEG\&. 
.TP
\fB\fIstream_h222 \fP\fP
ITU-T Rec\&. H\&.222\&.0 | ISO/IEC 13818-1 Annex A DSM-CC 
.TP
\fB\fIstream_h222_1 \fP\fP
ITU-T Rec\&. H\&.222\&.1 
.TP
\fB\fIstream_13818_6_A \fP\fP
ISO/IEC 13818-6 type A\&. 
.TP
\fB\fIstream_13818_6_B \fP\fP
ISO/IEC 13818-6 type B\&. 
.TP
\fB\fIstream_13818_6_C \fP\fP
ISO/IEC 13818-6 type C\&. 
.TP
\fB\fIstream_13818_6_D \fP\fP
ISO/IEC 13818-6 type D\&. 
.TP
\fB\fIstream_h222_aux \fP\fP
ITU-T Rec\&. H\&.222\&.0 | ISO/IEC 13818-1 auxiliary 
.TP
\fB\fIstream_audio_adts \fP\fP
ISO/IEC 13818-7 Audio with ADTS transport syntax\&. 
.TP
\fB\fIstream_video_14496_2 \fP\fP
ISO/IEC 14496-2 Visual\&. 
.TP
\fB\fIstream_audio_latm \fP\fP
ISO/IEC 14496-3 Audio with the LATM transport syntax as defined in ISO/IEC 14496-3 / AMD 1\&. 
.TP
\fB\fIstream_14496_1_pes \fP\fP
ISO/IEC 14496-1 SL-packetized stream or FlexMux stream carried in PES packets\&. 
.TP
\fB\fIstream_14496_1_iso \fP\fP
ISO/IEC 14496-1 SL-packetized stream or FlexMux stream carried in ISO/IEC14496_sections\&. 
.TP
\fB\fIstream_download \fP\fP
ISO/IEC 13818-6 Synchronized Download Protocol\&. 
.TP
\fB\fIstream_reserved \fP\fP
ITU-T Rec\&. H\&.222\&.0 | ISO/IEC 13818-1 Reserved (from 0x15 to 0x7f) 
.TP
\fB\fIstream_private \fP\fP
User Private (from 0x80 to 0xff) 
.PP
Definition at line 107 of file pmt\&.h\&.
.SH "Function Documentation"
.PP 
.SS "void atsc_table_eit_free (struct \fBatsc_table_eit\fP * table)"

.PP
Frees all data allocated by the ATSC EIT table parser\&. 
.PP
\fBParameters:\fP
.RS 4
\fItable\fP pointer to struct \fBatsc_table_eit\fP to be freed 
.RE
.PP

.SS "ssize_t atsc_table_eit_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, ssize_t buflen, struct \fBatsc_table_eit\fP ** table)"

.PP
Initializes and parses ATSC EIT table\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the EIT raw data 
.br
\fIbuflen\fP length of the buffer 
.br
\fItable\fP pointer to struct \fBatsc_table_eit\fP to be allocated and filled
.RE
.PP
This function allocates an ATSC EIT table and fills the fields inside the struct\&. It also makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void atsc_table_eit_print (struct \fBdvb_v5_fe_parms\fP * parms, struct \fBatsc_table_eit\fP * table)"

.PP
Prints the content of the ATSC EIT table\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fItable\fP pointer to struct \fBatsc_table_eit\fP 
.RE
.PP

.SS "void atsc_table_mgt_free (struct \fBatsc_table_mgt\fP * table)"

.PP
Frees all data allocated by the MGT table parser\&. 
.PP
\fBParameters:\fP
.RS 4
\fItable\fP pointer to struct \fBatsc_table_mgt\fP to be freed 
.RE
.PP

.SS "ssize_t atsc_table_mgt_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, ssize_t buflen, struct \fBatsc_table_mgt\fP ** table)"

.PP
Initializes and parses MGT table\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the MGT raw data 
.br
\fIbuflen\fP length of the buffer 
.br
\fItable\fP pointer to struct \fBatsc_table_mgt\fP to be allocated and filled
.RE
.PP
This function allocates an ATSC MGT table and fills the fields inside the struct\&. It also makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void atsc_table_mgt_print (struct \fBdvb_v5_fe_parms\fP * parms, struct \fBatsc_table_mgt\fP * table)"

.PP
Prints the content of the MGT table\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fItable\fP pointer to struct \fBatsc_table_mgt\fP 
.RE
.PP

.SS "void atsc_table_vct_free (struct \fBatsc_table_vct\fP * table)"

.PP
Frees all data allocated by the VCT table parser\&. 
.PP
\fBParameters:\fP
.RS 4
\fItable\fP pointer to struct \fBatsc_table_vct\fP to be freed 
.RE
.PP

.SS "ssize_t atsc_table_vct_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, ssize_t buflen, struct \fBatsc_table_vct\fP ** table)"

.PP
Initializes and parses VCT table\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the VCT raw data 
.br
\fIbuflen\fP length of the buffer 
.br
\fItable\fP pointer to struct \fBatsc_table_vct\fP to be allocated and filled
.RE
.PP
This function allocates an ATSC VCT table and fills the fields inside the struct\&. It also makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void atsc_table_vct_print (struct \fBdvb_v5_fe_parms\fP * parms, struct \fBatsc_table_vct\fP * table)"

.PP
Prints the content of the VCT table\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fItable\fP pointer to struct \fBatsc_table_vct\fP 
.RE
.PP

.SS "uint32_t dvb_bcd (uint32_t bcd)"

.PP
Converts from BCD to CPU integer internal representation\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbcd\fP value in BCD encoding 
.RE
.PP

.SS "void dvb_desc_free (struct \fBdvb_desc\fP ** list)"

.PP
frees a \fBdvb_desc\fP linked list 
.PP
\fBParameters:\fP
.RS 4
\fIlist\fP struct \fBdvb_desc\fP pointer\&. 
.RE
.PP

.SS "int dvb_desc_parse (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, uint16_t buflen, struct \fBdvb_desc\fP ** head_desc)"

.PP
parse MPEG-TS descriptors 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP Struct \fBdvb_v5_fe_parms\fP pointer 
.br
\fIbuf\fP Buffer with data to be parsed 
.br
\fIbuflen\fP Size of the buffer to be parsed 
.br
\fIhead_desc\fP pointer to the place to store the parsed data
.RE
.PP
This function takes a buf as argument and parses it to find the MPEG-TS descriptors inside it, creating a linked list\&.
.PP
On success, head_desc will be allocated and filled with a linked list with the descriptors found inside the buffer\&.
.PP
This function is used by the several MPEG-TS table handlers to parse the entire table that got read by dvb_read_sessions and other similar functions\&.
.PP
\fBReturns:\fP
.RS 4
Returns 0 on success, a negative value otherwise\&. 
.RE
.PP

.SS "void dvb_desc_print (struct \fBdvb_v5_fe_parms\fP * parms, struct \fBdvb_desc\fP * desc)"

.PP
prints the contents of a struct \fBdvb_desc\fP linked list 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP Struct \fBdvb_v5_fe_parms\fP pointer 
.br
\fIdesc\fP struct \fBdvb_desc\fP pointer\&. 
.RE
.PP

.SS "void dvb_hexdump (struct \fBdvb_v5_fe_parms\fP * parms, const char * prefix, const unsigned char * buf, int len)"

.PP
dumps data into the logs in hexadecimal format 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP Struct \fBdvb_v5_fe_parms\fP pointer 
.br
\fIprefix\fP String to be printed before the dvb_hexdump 
.br
\fIbuf\fP Buffer to hex dump 
.br
\fIlen\fP Number of bytes to show 
.RE
.PP

.SS "int dvb_mpeg_es_pic_start_init (const uint8_t * buf, ssize_t buflen, struct \fBdvb_mpeg_es_pic_start\fP * pic_start)"

.PP
Initialize a struct \fBdvb_mpeg_es_pic_start\fP from buffer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbuf\fP Buffer 
.br
\fIbuflen\fP Length of buffer 
.br
\fIpic_start\fP Pointer to allocated structdvb_mpeg_es_pic_start
.RE
.PP
\fBReturns:\fP
.RS 4
If buflen too small, return -1, 0 otherwise\&.
.RE
.PP
This function copies the length of struct \fBdvb_mpeg_es_pic_start\fP to pic_start and fixes endianness\&. seq_start has to be allocated with malloc\&. 
.SS "void dvb_mpeg_es_pic_start_print (struct \fBdvb_v5_fe_parms\fP * parms, struct \fBdvb_mpeg_es_pic_start\fP * pic_start)"

.PP
Print details of struct \fBdvb_mpeg_es_pic_start\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP for log functions 
.br
\fIpic_start\fP Pointer to struct \fBdvb_mpeg_es_pic_start\fP to print
.RE
.PP
This function prints the fields of struct \fBdvb_mpeg_es_pic_start\fP 
.SS "int dvb_mpeg_es_seq_start_init (const uint8_t * buf, ssize_t buflen, struct \fBdvb_mpeg_es_seq_start\fP * seq_start)"

.PP
Initialize a struct \fBdvb_mpeg_es_seq_start\fP from buffer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbuf\fP Buffer 
.br
\fIbuflen\fP Length of buffer 
.br
\fIseq_start\fP Pointer to allocated struct \fBdvb_mpeg_es_seq_start\fP
.RE
.PP
\fBReturns:\fP
.RS 4
If buflen too small, return -1, 0 otherwise\&.
.RE
.PP
This function copies the length of struct \fBdvb_mpeg_es_seq_start\fP to seq_start and fixes endianness\&. seq_start has to be allocated with malloc\&. 
.SS "void dvb_mpeg_es_seq_start_print (struct \fBdvb_v5_fe_parms\fP * parms, struct \fBdvb_mpeg_es_seq_start\fP * seq_start)"

.PP
Print details of struct \fBdvb_mpeg_es_seq_start\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP for log functions 
.br
\fIseq_start\fP Pointer to struct \fBdvb_mpeg_es_seq_start\fP to print
.RE
.PP
This function prints the fields of struct \fBdvb_mpeg_es_seq_start\fP 
.SS "void dvb_mpeg_pes_free (struct \fBdvb_mpeg_pes\fP * pes)"

.PP
Deallocate memory associated with a struct \fBdvb_mpeg_pes\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpes\fP struct \fBdvb_mpeg_pes\fP to be deallocated
.RE
.PP
If the pointer pes was allocated dynamically, this function can be used to free the memory\&. 
.SS "ssize_t dvb_mpeg_pes_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, ssize_t buflen, uint8_t * table)"

.PP
Initialize a struct \fBdvb_mpeg_pes\fP from buffer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP for log functions 
.br
\fIbuf\fP Buffer 
.br
\fIbuflen\fP Length of buffer 
.br
\fItable\fP Pointer to allocated struct \fBdvb_mpeg_pes\fP
.RE
.PP
\fBReturns:\fP
.RS 4
Length of data in table
.RE
.PP
This function copies the length of struct \fBdvb_mpeg_pes\fP to table and fixes endianness\&. The pointer table has to be allocated on stack or dynamically\&. 
.SS "void dvb_mpeg_pes_print (struct \fBdvb_v5_fe_parms\fP * parms, struct \fBdvb_mpeg_pes\fP * pes)"

.PP
Print details of struct \fBdvb_mpeg_pes\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP for log functions 
.br
\fIpes\fP Pointer to struct \fBdvb_mpeg_pes\fP to print
.RE
.PP
This function prints the fields of struct \fBdvb_mpeg_pes\fP 
.SS "void dvb_mpeg_ts_free (struct \fBdvb_mpeg_ts\fP * ts)"

.PP
Deallocate memory associated with a struct \fBdvb_mpeg_ts\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIts\fP struct \fBdvb_mpeg_ts\fP to be deallocated
.RE
.PP
If ts was allocated dynamically, this function can be used to free the memory\&. 
.SS "ssize_t dvb_mpeg_ts_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, ssize_t buflen, uint8_t * table, ssize_t * table_length)"

.PP
Initialize a struct \fBdvb_mpeg_ts\fP from buffer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP for log functions 
.br
\fIbuf\fP Buffer 
.br
\fIbuflen\fP Length of buffer 
.br
\fItable\fP Pointer to allocated struct \fBdvb_mpeg_ts\fP 
.br
\fItable_length\fP Pointer to size_t where length will be written to
.RE
.PP
\fBReturns:\fP
.RS 4
Length of data in table
.RE
.PP
This function copies the length of struct \fBdvb_mpeg_ts\fP to table and fixes endianness\&. The pointer table has to be allocated on stack or dynamically\&. 
.SS "void dvb_mpeg_ts_print (struct \fBdvb_v5_fe_parms\fP * parms, struct \fBdvb_mpeg_ts\fP * ts)"

.PP
Print details of struct \fBdvb_mpeg_ts\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP for log functions 
.br
\fIts\fP Pointer to struct \fBdvb_mpeg_ts\fP to print
.RE
.PP
This function prints the fields of struct \fBdvb_mpeg_ts\fP 
.SS "void dvb_table_eit_free (struct \fBdvb_table_eit\fP * table)"

.PP
Frees all data allocated by the DVB EIT table parser\&. 
.PP
\fBParameters:\fP
.RS 4
\fItable\fP pointer to struct \fBdvb_table_eit\fP to be freed 
.RE
.PP

.SS "ssize_t dvb_table_eit_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, ssize_t buflen, struct \fBdvb_table_eit\fP ** table)"

.PP
Initializes and parses EIT table\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the EIT raw data 
.br
\fIbuflen\fP length of the buffer 
.br
\fItable\fP pointer to struct \fBdvb_table_eit\fP to be allocated and filled
.RE
.PP
This function allocates an EIT table and fills the fields inside the struct\&. It also makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void dvb_table_eit_print (struct \fBdvb_v5_fe_parms\fP * parms, struct \fBdvb_table_eit\fP * table)"

.PP
Prints the content of the DVB EIT table\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fItable\fP pointer to struct \fBdvb_table_eit\fP 
.RE
.PP

.SS "void dvb_table_header_init (struct \fBdvb_table_header\fP * header)"

.PP
Initializes and parses MPEG-TS table header\&. 
.PP
\fBParameters:\fP
.RS 4
\fIheader\fP pointer to struct \fBdvb_table_header\fP to be parsed 
.RE
.PP

.SS "void dvb_table_header_print (struct \fBdvb_v5_fe_parms\fP * parms, const struct \fBdvb_table_header\fP * header)"

.PP
Prints the content of the MPEG-TS table header\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIheader\fP pointer to struct \fBdvb_table_header\fP to be printed 
.RE
.PP

.SS "void dvb_table_nit_descriptor_handler (struct \fBdvb_v5_fe_parms\fP * parms, struct \fBdvb_table_nit\fP * table, enum \fBdescriptors\fP descriptor, \fBnit_handler_callback_t\fP * call_nit, \fBnit_tran_handler_callback_t\fP * call_tran, void * priv)"

.PP
For each entry at NIT and NIT transport tables, call a callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fItable\fP pointer to struct \fBdvb_table_nit\fP 
.br
\fIdescriptor\fP indicates the NIT table descriptor to seek 
.br
\fIcall_nit\fP a nit_handler_callback_t function to be called when a new entry at the NIT table is found (or NULL)\&. 
.br
\fIcall_tran\fP a nit_tran_handler_callback_t function to be called when a new entry at the NIT transport table is found (or NULL)\&. 
.br
\fIpriv\fP an opaque pointer to be optionally used by the callbacks\&. The function won't touch on it, just use as an argument for the callback functions\&.
.RE
.PP
When parsing a NIT entry, we need to call some code to properly handle when a given descriptor in the table is found\&. This is used, for example, to create newer transponders to seek during scan\&.
.PP
For example, to seek for the CATV delivery system descriptor and call a function that would add a new transponder to a scan procedure: 
.PP
.nf
1 dvb_table_nit_descriptor_handler(
2                 &parms->p, dvb_scan_handler->nit,
3                 cable_delivery_system_descriptor,
4                 NULL, add_update_nit_dvbc, &tr);

.fi
.PP
 
.SS "void dvb_table_nit_free (struct \fBdvb_table_nit\fP * table)"

.PP
Frees all data allocated by the NIT table parser\&. 
.PP
\fBParameters:\fP
.RS 4
\fItable\fP pointer to struct \fBdvb_table_nit\fP to be freed 
.RE
.PP

.SS "ssize_t dvb_table_nit_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, ssize_t buflen, struct \fBdvb_table_nit\fP ** table)"

.PP
Initializes and parses NIT table\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the NIT raw data 
.br
\fIbuflen\fP length of the buffer 
.br
\fItable\fP pointer to struct \fBdvb_table_nit\fP to be allocated and filled
.RE
.PP
This function allocates a NIT table and fills the fields inside the struct\&. It also makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void dvb_table_nit_print (struct \fBdvb_v5_fe_parms\fP * parms, struct \fBdvb_table_nit\fP * table)"

.PP
Prints the content of the NIT table\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fItable\fP pointer to struct \fBdvb_table_nit\fP 
.RE
.PP

.SS "void dvb_table_pat_free (struct \fBdvb_table_pat\fP * table)"

.PP
Frees all data allocated by the PAT table parser\&. 
.PP
\fBParameters:\fP
.RS 4
\fItable\fP pointer to struct \fBdvb_table_pat\fP to be freed 
.RE
.PP

.SS "ssize_t dvb_table_pat_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, ssize_t buflen, struct \fBdvb_table_pat\fP ** table)"

.PP
Initializes and parses PAT table\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the PAT raw data 
.br
\fIbuflen\fP length of the buffer 
.br
\fItable\fP pointer to struct \fBdvb_table_pat\fP to be allocated and filled
.RE
.PP
This function allocates a PAT table and fills the fields inside the struct\&. It also makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void dvb_table_pat_print (struct \fBdvb_v5_fe_parms\fP * parms, struct \fBdvb_table_pat\fP * table)"

.PP
Prints the content of the PAT table\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fItable\fP pointer to struct \fBdvb_table_pat\fP 
.RE
.PP

.SS "void dvb_table_pmt_free (struct \fBdvb_table_pmt\fP * table)"

.PP
Frees all data allocated by the PMT table parser\&. 
.PP
\fBParameters:\fP
.RS 4
\fItable\fP pointer to struct \fBdvb_table_pmt\fP to be freed 
.RE
.PP

.SS "ssize_t dvb_table_pmt_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, ssize_t buflen, struct \fBdvb_table_pmt\fP ** table)"

.PP
Initializes and parses PMT table\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the PMT raw data 
.br
\fIbuflen\fP length of the buffer 
.br
\fItable\fP pointer to struct \fBdvb_table_pmt\fP to be allocated and filled
.RE
.PP
This function allocates a PMT table and fills the fields inside the struct\&. It also makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void dvb_table_pmt_print (struct \fBdvb_v5_fe_parms\fP * parms, const struct \fBdvb_table_pmt\fP * table)"

.PP
Prints the content of the PAT table\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fItable\fP pointer to struct \fBdvb_table_pmt\fP 
.RE
.PP

.SS "void dvb_table_sdt_free (struct \fBdvb_table_sdt\fP * table)"

.PP
Frees all data allocated by the SDT table parser\&. 
.PP
\fBParameters:\fP
.RS 4
\fItable\fP pointer to struct \fBdvb_table_sdt\fP to be freed 
.RE
.PP

.SS "ssize_t dvb_table_sdt_init (struct \fBdvb_v5_fe_parms\fP * parms, const uint8_t * buf, ssize_t buflen, struct \fBdvb_table_sdt\fP ** table)"

.PP
Initializes and parses SDT table\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fIbuf\fP buffer containing the SDT raw data 
.br
\fIbuflen\fP length of the buffer 
.br
\fItable\fP pointer to struct \fBdvb_table_sdt\fP to be allocated and filled
.RE
.PP
This function allocates a SDT table and fills the fields inside the struct\&. It also makes sure that all fields will follow the CPU endianness\&. Due to that, the content of the buffer may change\&.
.PP
\fBReturns:\fP
.RS 4
On success, it returns the size of the allocated struct\&. A negative value indicates an error\&. 
.RE
.PP

.SS "void dvb_table_sdt_print (struct \fBdvb_v5_fe_parms\fP * parms, struct \fBdvb_table_sdt\fP * table)"

.PP
Prints the content of the SDT table\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparms\fP struct \fBdvb_v5_fe_parms\fP pointer to the opened device 
.br
\fItable\fP pointer to struct \fBdvb_table_sdt\fP 
.RE
.PP

.SS "void dvb_time (const uint8_t data[5], struct tm * tm)"

.PP
Converts a DVB EIT formatted timestamp into struct tm\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP event on DVB EIT time format 
.br
\fItm\fP pointer to struct tm where the converted timestamp will be stored\&. 
.RE
.PP

.SH "Variable Documentation"
.PP 
.SS "const struct \fBdvb_descriptor\fP dvb_descriptors[]"

.PP
Contains the parsers for the several descriptors\&. 
.SS "const char* dvb_mpeg_es_frame_names[5]"

.PP
Vector that translates from enum dvb_mpeg_es_frame_t to string\&. 
.SS "const \fBdvb_table_init_func\fP dvb_table_initializers[256]"

.PP
Table with all possible descriptors\&. 
.SS "const char* pmt_stream_name[]"

.PP
Converts from enum dvb_streams into a string\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for libdvbv5 from the source code\&.
