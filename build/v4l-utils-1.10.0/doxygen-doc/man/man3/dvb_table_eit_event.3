.TH "dvb_table_eit_event" 3 "Sun Jan 24 2016" "Version 1.10.0" "libdvbv5" \" -*- nroff -*-
.ad l
.nh
.SH NAME
dvb_table_eit_event \- DVB EIT event table\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <eit\&.h>\fP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "uint16_t \fBevent_id\fP"
.br
.ti -1c
.RI "union {"
.br
.ti -1c
.RI "   uint16_t \fBbitfield1\fP"
.br
.ti -1c
.RI "   uint8_t \fBdvbstart\fP [5]"
.br
.ti -1c
.RI "}; "
.br
.ti -1c
.RI "uint8_t \fBdvbduration\fP [3]"
.br
.ti -1c
.RI "union {"
.br
.ti -1c
.RI "   uint16_t \fBbitfield2\fP"
.br
.ti -1c
.RI "   struct {"
.br
.ti -1c
.RI "      uint16_t \fBdesc_length\fP:12"
.br
.ti -1c
.RI "      uint16_t \fBfree_CA_mode\fP:1"
.br
.ti -1c
.RI "      uint16_t \fBrunning_status\fP:3"
.br
.ti -1c
.RI "   } "
.br
.ti -1c
.RI "}; "
.br
.ti -1c
.RI "struct \fBdvb_desc\fP * \fBdescriptor\fP"
.br
.ti -1c
.RI "struct \fBdvb_table_eit_event\fP * \fBnext\fP"
.br
.ti -1c
.RI "struct tm \fBstart\fP"
.br
.ti -1c
.RI "uint32_t \fBduration\fP"
.br
.ti -1c
.RI "uint16_t \fBservice_id\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
DVB EIT event table\&. 


.PP
\fBParameters:\fP
.RS 4
\fIevent_id\fP an uniquelly (inside a service ID) event ID 
.br
\fIdesc_length\fP descriptor's length 
.br
\fIfree_CA_mode\fP free CA mode\&. 0 indicates that the event is not scrambled 
.br
\fIrunning_status\fP running status of the event\&. The status can be translated to string via dvb_eit_running_status_name string table\&. 
.br
\fIdescriptor\fP pointer to struct \fBdvb_desc\fP 
.br
\fInext\fP pointer to struct \fBdvb_table_eit_event\fP 
.br
\fItm_start\fP event start (in struct tm format) 
.br
\fIduration\fP duration in seconds 
.br
\fIservice_id\fP service ID
.RE
.PP
This structure is used to store the original EIT event table, converting the integer fields to the CPU endianness, and converting the timestamps to a way that it is better handled on Linux\&.
.PP
The undocumented parameters are used only internally by the API and/or are fields that are reserved\&. They shouldn't be used, as they may change on future API releases\&.
.PP
Everything after \fBdvb_table_eit_event::descriptor\fP (including it) won't be bit-mapped to the data parsed from the MPEG TS\&. So, metadata are added there\&. 
.PP
Definition at line 104 of file eit\&.h\&.
.SH "Field Documentation"
.PP 
.SS "union { \&.\&.\&. } "

.SS "union { \&.\&.\&. } "

.SS "uint16_t dvb_table_eit_event::bitfield1"

.PP
Definition at line 107 of file eit\&.h\&.
.SS "uint16_t dvb_table_eit_event::bitfield2"

.PP
Definition at line 112 of file eit\&.h\&.
.SS "uint16_t dvb_table_eit_event::desc_length"

.PP
Definition at line 114 of file eit\&.h\&.
.SS "struct \fBdvb_desc\fP* dvb_table_eit_event::descriptor"

.PP
Definition at line 119 of file eit\&.h\&.
.SS "uint32_t dvb_table_eit_event::duration"

.PP
Definition at line 122 of file eit\&.h\&.
.SS "uint8_t dvb_table_eit_event::dvbduration[3]"

.PP
Definition at line 110 of file eit\&.h\&.
.SS "uint8_t dvb_table_eit_event::dvbstart[5]"

.PP
Definition at line 108 of file eit\&.h\&.
.SS "uint16_t dvb_table_eit_event::event_id"

.PP
Definition at line 105 of file eit\&.h\&.
.SS "uint16_t dvb_table_eit_event::free_CA_mode"

.PP
Definition at line 115 of file eit\&.h\&.
.SS "struct \fBdvb_table_eit_event\fP* dvb_table_eit_event::next"

.PP
Definition at line 120 of file eit\&.h\&.
.SS "uint16_t dvb_table_eit_event::running_status"

.PP
Definition at line 116 of file eit\&.h\&.
.SS "uint16_t dvb_table_eit_event::service_id"

.PP
Definition at line 123 of file eit\&.h\&.
.SS "struct tm dvb_table_eit_event::start"

.PP
Definition at line 121 of file eit\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for libdvbv5 from the source code\&.
